<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_falloff_set_model</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_falloff_set_model" />
  <meta name="rh-index-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
  <meta name="search-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>audio_falloff_set_model</h1>
  <p>Aby zwiększyć wszechstronność silnika audio, w programie <span data-keyref="GameMaker Name">GameMaker</span> można wybrać model obniżania częstotliwości, który będzie odpowiedni dla danej gry. Model ten będzie używany we <b>wszystkich</b> funkcjach audio w grze lub aplikacji, dlatego należy upewnić się, że wybrany model jest właściwy, ponieważ każdy z nich będzie miał wpływ na to, jak słuchacz odbiera dźwięki odtwarzane przez emitery lub za pomocą funkcji <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span>.</p>
  <p>Domyślnym modelem obniżania jakości jest <span class="inline">audio_falloff_none</span>, co oznacza, że nie występuje obniżanie jakości podczas korzystania z emiterów lub pozycjonowanego dźwięku, chyba że zostanie zmieniony model obniżania jakości.</p>
  <h2>Modele odpadania</h2>
  <p>Podczas odtwarzania dźwięku przez stronę <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span> lub ustawiania <a href="Audio_Emitters/audio_emitter_falloff.htm">obniżenia poziomu dźwięku dla emitera</a> należy ustawić trzy argumenty, a każdy z nich jest odpowiedni dla konkretnego modelu i wpływa na sposób, w jaki końcowy dźwięk jest słyszany przez gracza, w zależności od odległości słuchacza od źródła. Te trzy argumenty to:</p>
  <ul class="colour">
    <li><b>Odległość odniesienia</b>: jest to odległość od słuchacza, przy której głośność odtwarzanego dźwięku normalnie spadłaby o połowę, zanim wpłynąłby na nią współczynnik tłumienia lub określona odległość maksymalna.<b></b></li>
    <li><b>Maksymalna odległość</b>: określa odległość, w której nie będzie już występować żadne tłumienie dźwięku źródłowego. Może to być punkt, w którym dźwięk przestaje być słyszalny <i>lub</i> punkt, w którym głośność dźwięku nie spada poniżej minimalnego progu określonego przez wybrany model.<b></b></li>
    <li><b>Współczynnik</b> dezadaptacji: Współczynnik zanikania jest stosowany w tłumieniu odległości na podstawie modelu odwrotności odległości i określa ostateczny minimalny próg dla dźwięku z zanikaniem.</li>
  </ul>
  <p>Modele falloff, na które wpływają te argumenty, są reprezentowane w <span data-keyref="GameMaker Name">GameMakerze</span> przez następujące stałe (w tabeli podano także dokładne obliczenia):</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Audio_Falloff_Type"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm">Stała tłumienia dźwięku</a></span></th>
      </tr>
      <tr>
        <th>Stała</th>
        <th>Obliczanie wzmocnienia</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance</span></td>
        <td><span class="inline"><br />
            gain = (listener_distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = ((distance / reference_distance) ^ (-falloff_factor)) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance</span></td>
        <td><span class="inline"><br />
            gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = (reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance</span></td>
        <td><span class="inline"><br />
            distance = min(distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_none</span></td>
        <td><span class="inline"><br />
            gain = 1</span></td>
      </tr>
    </tbody>
  </table>
  <p>Modele &quot;<span class="inline">_scaled</span>&quot; są wyskalowane w taki sposób, że dźwięki są gwarantowane, że całkowicie odpadną w maksymalnej odległości.</p>
  <p>Poniższe wykresy są wizualną prezentacją działania niektórych z powyższych stałych i ich wpływu na odtwarzany dźwięk:</p>
  <p><img alt="Distance Model Examples" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Audio/Distance_Models.png" /></p>
  <p> </p>
  <h4>Składnia:</h4>
  <p class="code">audio_falloff_set_model(model);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Opis</th>
      </tr>
      <tr>
        <td><span class="notranslate">model</span></td>
        <td><span data-keyref="Type_Constant_Audio_Falloff_Type"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm">Stała tłumienia dźwięku</a></span></td>
        <td><span class="notranslate">The <b>constant</b> used to set the falloff model.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Zwroty:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Przykład:</h4>
  <p class="code">audio_falloff_set_model(audio_falloff_exponent_distance_clamped);<br />
    audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);</p>
  <p>Powyższy kod ustawia model opadania, a następnie odtwarza dźwięk zaindeksowany w zmiennej &quot;snd_Waterfall&quot;, który zostanie zapętlony w pozycji <span class="notranslate">room</span>, z wartością odniesienia opadania 100, odległością opadania 300, współczynnikiem opadania 1 i niskim priorytetem.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Powrót: <a href="Audio.htm">Audio</a></div>
        <div style="float:right">Następny: <a href="audio_sound_gain.htm"><span class="notranslate">audio_sound_gain</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Wszystkie prawa zastrzeżone.</span></h5>
  </div>
  <!-- KEYWORDS
audio_falloff_set_model
audio_falloff_exponent_distance
audio_falloff_exponent_distance_clamped
audio_falloff_inverse_distance
audio_falloff_inverse_distance_clamped
audio_falloff_linear_distance
audio_falloff_linear_distance_clamped
audio_falloff_none
-->
  <!-- TAGS
audio_falloff_set_model
-->
</body>
</html>