
  
  System plików
  Podczas korzystania z funkcji systemu plików lub dołączonych plików w programie GameMaker niezwykle ważna jest dokładna znajomość
    jak działa system plików i co dzieje się za kulisami. W tym celu ten rozdział ma za zadanie wyjaśnić i objaśnić dokładnie, jak rzeczy są przechowywane, gdzie są przechowywane i jakie są możliwe ograniczenia lub obejścia tego systemu.
    w tym systemie.
  Pierwszą i najważniejszą rzeczą, na którą należy zwrócić uwagę w przypadku funkcji plików, jest to, że są one ograniczone - ogólnie i domyślnie - do piaskownicy. Oznacza to, że GameMaker nie może zapisywać ani wczytywać plików z dowolnego miejsca, które nie jest częścią pakietu gry lub pamięci lokalnej urządzenia, bez wyraźnego polecenia użytkownika, a nawet wtedy polecenie to jest ograniczone tylko do platform docelowych Windows, macOS i Ubuntu (Linux).
  WAŻNE! Na platformach docelowych Desktop (Windows, macOS oraz Ubuntu (Linux)) można jednak wyłączyć piaskownicę, zaznaczając opcję Disable file system sandbox (Wyłącz piaskownicę systemu plików ) w opcjach gry dla platformy docelowej. Robisz to na własne ryzyko i chociaż otworzy to możliwość zapisywania i wczytywania plików oraz umożliwi dostęp do plików w dowolnym miejscu w systemie, może to być nadal ograniczone przez uprawnienia systemu operacyjnego i nie będzie można zapisywać
    do program_katalog folderu.
  Aby zrozumieć działanie piaskownicy, należy przede wszystkim zrozumieć, że istnieją dwa odrębne obszary dla plików:
  
    The File Bundle - w tym miejscu przechowywane są wszystkie pliki spakowane z grą wykonywalną, w tym pliki dodane do listy Included Files asset z programu GameMaker IDE (są to
      są plikami zewnętrznymi, które mają być spakowane z grą).
    Obszar zapisu - jest to obszar pamięci masowej urządzenia, do którego gra może bezpiecznie zapisywać dane, a gra ma gwarancję, że jest to obszar, do którego można zapisywać dane.
  
  Poniższy schemat może pomóc w lepszej wizualizacji tego zjawiska:
  
  UWAGA: Nigdy nie można zapisywać w katalogu File Bundle (program).
  Gdy gra jest sandboxowana, dwa docelowe obszary - katalog bundle i lokalny obszar przechowywania - są dostępne na każdej platformie docelowej, ale na każdej z nich będą działać nieco inaczej. Jednak GameMaker wyabstrahował główną
    co można, a czego nie można zrobić, ułatwiając w ten sposób dostosowanie gry do wielu środowisk.
  Na początek należy zrozumieć, co mamy na myśli, gdy mówimy o working_directory. Jest to synonim dwóch
    możliwych miejsc zapisu (jak pokazano na powyższym diagramie) i kiedy użyjesz tego katalogu, zrobi on jedną z dwóch rzeczy, w zależności od tego, czy czytasz, czy piszesz, oraz od tego, czy plik, z którego czytasz, został zmieniony, czy nie:
  
    Operacje odczytu - program working_directory najpierw sprawdza obszar zapisu, aby sprawdzić, czy plik, do którego chcemy uzyskać dostęp, znajduje się w tym obszarze, a jeśli tak, używa go. Jeśli jednak plik nie istnieje w obszarze zapisu, sprawdza następnie obszar pakietu plików i
      i używa go (jeśli szukany plik jest dołączony do gry).
    Operacje zapisu - można je wykonywać tylko w obszarze zapisu.
  
  UWAGA: ogólnie rzecz biorąc, GameMaker zrobi to wszystko za Ciebie i rzadko będziesz musiał używać wbudowanej zmiennej working_directory.
  Korzystając z tych dwóch prostych reguł, możemy teraz zobaczyć, jak działają następujące funkcje (są to przykłady ułatwiające wizualizację procesu dla różnych dostępnych funkcji):
  
    directory_create() (oraz inne funkcje katalogów) będą działać tylko w obszarze zapisu .
     funkcje systemu plików będą zwracać informacje o plikach zarówno z pakietu , jak i z obszaru zapisu , ale będą tylko
     zapisywać tylko do obszaru zapisu .
    funkcje zapisu plików tekstowych, binarnych i INI utworzą nowy plik w obszarze zapisu, jeśli taki jeszcze nie istnieje, kopiując wszelkie informacje z oryginalnych plików dołączonych do pakietu z grą, jeśli takie istnieją.
      Należy pamiętać, że oryginalne pliki pozostaną w części katalogu zapisu przeznaczonej tylko do odczytu, ale nie będzie można się do nich odwoływać, dopóki istnieje ich wersja w części obszaru zapisu przeznaczonej do odczytu/zapisu.
  
  Na platformach Windows, macOS i Ubuntu (Linux) istnieją dwa sposoby zapisywania i wczytywania plików spoza piaskownicy, a mianowicie za pomocą funkcji get_open_filename() oraz
    get_save_filename() (obie te funkcje będą wymagały od użytkownika wybrania obszaru do wczytania i zapisania, a zwrot
    string może być następnie użyty w pozostałych funkcjach plików w celu ominięcia piaskownicy - więcej szczegółów znajduje się w opisach funkcji w części językowej podręcznika). Innym sposobem jest całkowite wyłączenie piaskownicy w Opcjach gry dla platformy docelowej (dostępne tylko dla platform Desktop, o czym mowa w dalszej części strony).
  W HTML5 możliwe jest również wczytywanie plików spoza piaskownicy z witryny server, jednak należy to robić wyłącznie za pomocą funkcji buffer_load_async() jak na stronie .
    ładowanie synchroniczne zostało wycofane z większości przeglądarek i w końcu przestanie być stosowane. Oznacza to, że pliki wczytywane w ten sposób powinny być zapisywane jako pliki binarne - na przykład plik *.ini można zapisać jako ciąg znaków
    (zob. ini_close() szczegóły), a następnie zapisać go w pliku buffer, który może być zapisywany i ładowany przy użyciu funkcji asynchronicznych. Uwaga:
    że jeśli ładujesz obrazy za pomocą sprite_add() to są one już obsługiwane asynchronicznie.
  Należy również wiedzieć, że każda platforma docelowa ma swój własny obszar zapisu, w którym można zapisywać i odczytywać pliki i katalogi. Poniżej znajduje się lista tych obszarów dla każdej platformy docelowej, gdy są one sandboxowane:
  
    Windows i Windows UWP: W systemie Windows wszystkie pliki znajdują się w katalogu %localappdata%\<Game Name> (na stronie Windows 7 jest to katalog /Users/<User Name>/AppData/Local/<Game Name> ).
    HTML5: Wszystko odbywa się za pośrednictwem lokalnej pamięci masowej.
    macOS: Przechowywanie zależy od tego, czy aplikacja jest sandboxowana, czy nie (zgodnie z zasadami firmy Apple, przy czym path to zwykle ~/Library/Application Support/<Game Name>).
    Ubuntu (Linux): Pliki są przechowywane w katalogu Home/.config/gamename, gdzie "Home" jest katalogiem domowym użytkownika -. /home/<username>
    iOS / tvOS: Standardową lokalizacją jest pamięć masowa (widoczna w iTunes).
    Android: Pliki znajdują się w standardowej lokalizacji (która jest niewidoczna, chyba że urządzenie jest zrootowane) /data/<package name>.
  
  Warto zauważyć, że moduł docelowy HTML5 ma limit pamięci lokalnej (który może wynosić od 1MB do 5MB w zależności od przeglądarki), co oznacza, że nie będzie można zapisywać dużych plików sprites, zrzutów ekranu itp.
   
   
   
  
    
      
        Powrót: Informacje dodatkowe
        Następny: Operatory bitowe i binarne
      
    
    © Copyright YoYo Games Ltd. 2021 Wszystkie prawa zastrzeżone.
  
  
  

