
  
  Co to jest programowanie?
  W poprzednim rozdziale opisaliśmy, w jaki sposób GameMaker tworzy grę, ale niezależnie od tego, co dodałeś na stronach sprites, objects czy rooms, nic się nie stanie, jeśli tego nie zaprogramujesz . Ale co to jest program?
  W ogólnym rozumieniu program to po prostu zestaw instrukcji (lub  oświadczenies), które użytkownik przekazuje komputerowi, aby ten wykonał określone zadania. Zadania te mogą być bardzo różne - od prostego nakazania komputerowi narysowania czegoś na ekranie po obliczenie wartości na podstawie danych wprowadzonych przez użytkownika i zareagowanie na nią. Na poprzedniej stronie rozmawialiśmy o przesunięciu instancji object w prawo o 2 piksele, przyjrzyjmy się więc programowi, który to zrobi:
  W języku GML Visual wyglądałoby to następująco:
  
  Przy użyciu kodu GML wyglądałoby to następująco:
  x = x + 2;
  Aby zrozumieć, o co chodzi, musimy najpierw omówić zmienne, a następnie funkcje i wreszcie warunki , ponieważ te trzy elementy stanowią zasadniczą część każdego programu.
   
  Zmienne
  
    Zmienne są podstawą programowania, podobnie jak funkcje (o których za chwilę). Zmienna to po prostu wartość o określonej nazwie, a w powyższym przypadku zmienna nazywa się "x". Zmienna "x" może mieć dowolną wartość, np. -126, 583 lub nawet 1.56378, ale rzeczywista wartość "x" jest nieistotna, ponieważ może się zmieniać (stąd nazwa "zmienna"). Ważne jest to, że bierzemy "x" i dodajemy do niej 2. Warto zauważyć, że w tym przypadku "x" jest zmienną wbudowaną, co oznacza, że jest to zmienna tworzona przez GameMaker dla wszystkich objects, ale można też tworzyć własne zmienne.
    Aby utworzyć zmienną, należy ją zadeklarować , zanim będzie można jej użyć. Zadeklarowanie zmiennej jest informacją dla GameMakera, że ta nowa zmienna istnieje i ma wartość początkową. Aby zadeklarować zmienną, wystarczy zrobić coś takiego:
    
    lub:
    points = 0;
    Gdy zmienna zostanie zadeklarowana, można jej używać w dalszym kodzie lub działaniach programu. Wspaniałą cechą zmiennych jest to, że pozwalają na "ponowne użycie" wartości w wielu miejscach, bez konieczności martwienia się o to, jaka to jest wartość. Na przykład, powiedzmy, że mamy zmienną "damage" i używamy jej w różnych miejscach, aby powiedzieć programowi GameMaker, by zadał pewną ilość obrażeń innym objects w grze. Możemy zadeklarować zmienną "damage" jako 20, ale później zdecydujemy, że jest to zbyt duża wartość i chcemy ją zmienić na 10. Gdybyśmy użyli wartości 20 zamiast zmiennej, musielibyśmy przejrzeć cały nasz kod lub akcje i zmienić 20 na 10, co jest czasochłonne i podatne na błędy. Natomiast użycie zmiennej oznacza, że musimy ją zmienić na 10 tylko raz , gdy ją zadeklarujemy, a reszta kodu lub działań będzie korzystać z tej nowej wartości.
    Warto zauważyć, że istnieje wiele różnych typów zmiennych, a każdy z nich ma nieco inne sposoby użycia. Nie będziemy się tutaj tym zajmować, ale więcej informacji na ten temat można znaleźć w rozdziale GameMaker Language Overview w podręczniku.
    Zmienne to jednak tylko pierwsza część tej historii. Kolejną częścią jest użycie Funkcji...
     
  
  Funkcje
  
    Kolejną ważną częścią programowania jest używanie funkcji i zmiennych. Funkcja jest po prostu instrukcją dla komputera, aby coś zrobił, i może mieć wartości wejściowe oraz wyjściowe (tzn. możesz podać jej jakąś wartość, a ona wykona jakąś operację i zwróci inną wartość), choć nie wszystkie funkcje wymagają danych wejściowych i nie wszystkie mają wartości wyjściowe. Aby lepiej to zrozumieć, przyjrzyjmy się funkcji wbudowanej w program GameMaker.
    Funkcja, którą się zajmiemy, to instance_number()która w GML Visual jest akcją Get Instance Count. Ta funkcja/akcja pobierze liczbę wystąpień danego elementu object w grze room, a Ty użyjesz jej w następujący sposób:
    
    lub:
    number = instance_number(obj_Enemy);
    W obu powyższych przykładach funkcja przyjmuje identyfikator object jako wartość wejściową (parametr  argument lub parametr) i daje wartość wyjściową (wartość zwracaną ), która jest liczbą instancji danej strony object obecnych na stronie room w momencie wywołania funkcji/działania. Zwróć uwagę, że do przechowywania wartości zwracanej używamy zmiennej "number". Zmienna ta może zostać zadeklarowana przed uruchomieniem tego kodu lub zostanie uznana za zadeklarowaną w momencie uruchomienia kodu i przypisania jej wartości zwracanej przez funkcję/działanie.
    Warto zauważyć, że użytkownik nie jest ograniczony do korzystania z wbudowanych akcji GameMaker Language lub GML Visual i może konstruować własne funkcje, które można wykorzystać do rozszerzenia możliwości programowania (więcej informacji na ten temat można znaleźć tutaj dla GML i tutaj dla GML Visual).
    Z funkcjami i zmiennymi można zrobić bardzo wiele, ale byłyby one bezużyteczne bez ostatniego ważnego elementu programistycznej opowieści, jakim są warunki...
     
  
  Warunkowe
  
    Duża część programowania polega na zadawaniu pytań. Są to zazwyczaj proste pytania, których wynik może być albo prawdziwy, albo fałszywy. Pytania te nazywamy warunkowymi (a wartości true i false są nazywane wartościami boolean ). Najbardziej powszechnym i szeroko stosowanym pytaniem warunkowym jest pytanie "if", które służy do sprawdzania, czy coś jest true lub false , a następnie do podejmowania odpowiednich działań. Prostym przykładem może być usunięcie postaci z gry, jeśli jej zdrowie spadnie poniżej zera, co w prostym języku można by wyrazić jako:
    if the character variable "hp" is less than or equal to zero, then destroy it.
    Aby przekształcić powyższy tekst w kod, otrzymalibyśmy następującą instrukcję:
    
    lub:
    if (hp <= 0)
      {
      
          instance_destroy();
      
      }
    
    Tak więc powyżej zadajemy pytanie "czy zmienna hp jest mniejsza lub równa 0", a następnie, jeśli jest to prawda, wywołujemy funkcję instance_destroy() lub akcję Zniszcz instancję Object . Zwróć uwagę, że "then" (jeśli coś... to coś...) jest domyślne i nie musisz go dodawać, a także zwróć uwagę, że w kodzie GML używamy nawiasów klamrowych {} , aby "zablokować" kod, który ma być wykonany, gdy " if" osiągnie wartość true (w kodzie wizualnym GML jest to symbolizowane przez usunięcie akcji po prawej stronie akcji "If"). Wszystko, co zostanie dodane między nawiasami klamrowymi, zostanie wykonane tylko wtedy, gdy " if" zostanie ocenione na true, więc w jednym "bloku" można wykonać więcej niż jedną instrukcję.
    Jeszcze jedną rzeczą, na którą należy zwrócić uwagę, używając warunku "if", jest to, że możemy dodać do niego również instrukcję "else", tak więc warunek będzie brzmiał "jeśli coś zostanie ocenione na true to zrób coś, w przeciwnym razie zrób coś innego". W ten sposób można sobie poradzić z wyrażeniem warunkowym zwracającym true  lub  false. Przytoczmy też przykład:
    
    lub:
    if (countdown <= 0)
      {
      
          instance_create_layer(x, y, "Instances", obj_Bullet);
      
          countdown = 30;
      
      }
      else
      {
      
          countdown = countdown - 1;
      
      }
    
    Powyższy kod można przetłumaczyć na zwykły język jako:
    if the countdown variable is less than or equal to zero then:
      
          create an instance of the object "obj_Bullet" at the current x/y position on the layer "instances",
      
          reset the countdown variable to 30.
      
      else:
      
          subtract one from the countdown variable.
    
    Nie należy się zbytnio przejmować częścią powyższego kodu dotyczącą tworzenia instancji, ponieważ zajmiemy się nią bardziej szczegółowo w następnych rozdziałach. Ważne jest, aby zrozumieć, że możesz tworzyć wyrażenia warunkowe, które sprawdzają, czy coś jest true lub false , i w ten sposób sprawić, że Twój program będzie reagował w różny sposób. Może się to wydawać bardzo proste, ale w rzeczywistości jest niezwykle potężne i stanowi podstawę niemal wszystkiego, co robisz, programując w GameMakerze.
  
   
  Tak więc, aby odpowiedzieć na nasze pytanie "Czym jest programowanie?", możemy powiedzieć, że programowanie to używanie kombinacji stwierdzeń -  które mogą wykorzystywać  zmienna s , aby utworzyć  wyrażenies, funkcji do wykonywania zadań oraz warunkowe s do zadawania pytań - a następnie uruchamianie tych instrukcji współbieżnie, aby osiągnąć jakiś cel. Poniżej znajduje się nieco bardziej złożony program w języku GML Visual i GML. Czy potrafisz odgadnąć, co on robi?
  
  lub:
  if mouse_check_button_pressed(mb_left) == true
    {
    
        x = mouse_x
    
        y = mouse_y
    
        image_blend = c_red;
    
    }
    else
    {
    
        if mouse_check_button_released(mb_left) == true
        {
    
            image_blend = c_white;
    
        }
    
    }
  
  SpoilerPowyższy kod najpierw sprawdza, czy jest wciśnięty przycisk myszy ( lewy przycisk myszy, który jest zdefiniowany za pomocą stałej " mb_left"),
      a jeśli przycisk ten został naciśnięty, to przesuwa instancję uruchomionego kodu na bieżącą pozycję myszy (zdefiniowaną za pomocą zmiennych wbudowanych " mouse_x" i " mouse_y") oraz
      ustawia także kolor mieszania instancji na czerwony. Jeśli przycisk myszy nie został wciśnięty, to sprawdzane jest, czy został on zwolniony, a jeśli tak, to przywracany jest kolor mieszanki instancji na biały (zauważ, że
      ponownie używamy pewnych wbudowanych stałych - " c_red" i " c_white" - aby łatwo zdefiniować kolory).
   
  Mam nadzieję, że teraz masz już nieco większe pojęcie o tym, na czym polega programowanie. Przejdźmy więc do poznania GameMaker IDE i zobaczmy, jak dodawać do gry assets takie elementy, jak sprite 'y, obiekty i inne ważne zasoby, których będzie potrzebować Twoja gra.
   
   
   
  
    
      
        Powrót: Indeks
        Następny: Tworzenie sprite'ów
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

