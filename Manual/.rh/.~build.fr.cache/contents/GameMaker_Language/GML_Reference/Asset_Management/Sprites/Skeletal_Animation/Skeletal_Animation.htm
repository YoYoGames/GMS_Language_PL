
  
  Animacja szkieletowa Sprite'y
  Funkcje znajdujące się w tej sekcji są przeznaczone wyłącznie do użytku ze stroną sprites, która została zaimportowana z pliku animacji szkieletowej (a konkretnie z plików JSON, które Kręgosłup i mogą być używane do uzyskiwania informacji o animacji asset w grze, a także do ustawiania pewnych właściwości animacji. Tych funkcji można używać razem ze zwykłymi funkcjami i zmiennymi sprite, co pozwala na przykład mieszać dwie animacje szkieletowe przy użyciu tych specjalnych funkcji, a jednocześnie ustawiać skalę obrazu za pomocą zwykłych zmiennych instancji sprite (więcej informacji o zmiennych instancji sprite można znaleźć tutaj).
  UWAGA Aby uzyskać więcej informacji na temat importowania animacji szkieletowej sprites wykonanej za pomocą Spine, zapoznaj się z częścią Importowanie sprite'ów bez mapy bitowej.
  Więcej informacji na temat funkcji tego rodzaju strony sprites można znaleźć w poniższych sekcjach:
  
    Animacja
    Skóry
    Załączniki
    Bones
    Sloty
    Rysunki i inne
  
   
  Odcień czarny Wsparcie
  Ta właściwość umożliwia nadanie ciemnym obszarom slotów Spine sprite innego koloru niż obszarom jasnym (jest to właściwość Spine IDE, więcej szczegółów można znaleźć w sekcji Tint black ). Obecnie, aby móc korzystać z tej funkcji w witrynie GameMaker Studio 2, trzeba użyć niestandardowego shadera podczas rysowania witryny Spine sprite, która jej używa. Ta strona shader zawiera globalną zmienną jednorodną o nazwie "gm_SpineTintBlackColour", którą runner wypełnia bieżącym kolorem tint-black, pobieranym automatycznie z danych Spine. Wymagany adres shader jest pokazany poniżej:
   Vertex Shader (jest to ten sam adres, co domyślny passthrough vertex shader)
  attribute vec3 in_Position; // (x,y,z)
    attribute vec4 in_Colour; // (r,g,b,a)
    attribute vec2 in_TextureCoord; // (u,v)
    
    varying vec2 v_vTexcoord;
    varying vec4 v_vColour;
    
    void main()
    {
        vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
        v_vColour = in_Colour;
        v_vTexcoord = in_TextureCoord;
    }
  
  Shader fragmentów:
  varying vec2 v_vTexcoord;
    varying vec4 v_vColour;
    
    uniform vec4 gm_SpineTintBlackColour; // This is the uniform containing the tint-black colour
    
    void main()
    {
        vec4 tb = gm_SpineTintBlackColour;
        vec4 texcol = texture2D( gm_BaseTexture, v_vTexcoord );
        vec4 outcol;
        outcol.rgb = v_vColour.rgb * texcol.rgb;
        outcol.rgb += tb.rgb * ((tb.a * (texcol.a - 1.0)) + (1.0 - texcol.rgb)); // This line performs the tint-    black blending logic
        outcol.a = v_vColour.a * texcol.a;
        gl_FragColor = outcol;
    }
  
  W tym celu należy najpierw wywołać stronę shader, następnie narysować stronę sprite, a następnie zresetować stronę shader, czyli coś takiego:
  shader_set(shd_spine_tint_black);
    draw_self();
    shader_reset();
   
   
   
  
    
      
        Powrót: Sprites
        Następny: Informacje o sprite'ach
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

