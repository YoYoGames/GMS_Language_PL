
  
  Wydarzenia, momenty i komunikaty nadawane
  Poza wszystkimi wymienionymi tutaj właściwościami sequence struct można również dodać specjalne właściwości "akcji" do strony sequence. Do strony sequence object można dodać trzy różne rodzaje takich właściwości "akcji" - Zdarzenia. Momenty i Komunikaty - a każdy z nich jest szczegółowo opisany w poniższych sekcjach.
  Sekwencja zdarzeń
  Do sekwencji objects można dodawać zdarzenia, które są analogiczne do zdarzeń używanych przez object assets. Zdarzenia przypisane do strony sequence object będą występować w określonej kolejności, albo raz w określonym momencie cyklu życia strony sequence, albo w każdej ramce, w której działa strona sequence. W tej sekcji omówimy sposób obsługi tych zdarzeń za pomocą kodu, ale można je także dodawać za pomocą Edytora sekwencji. Należy pamiętać, że na podaną tu kolejność zdarzeń nie ma wpływu kierunek ruchu głowicy odtwarzającej i nawet jeśli strona sequence jest odtwarzana do tyłu, zdarzenia nadal będą uruchamiane w podanej poniżej kolejności.
  Dostępne są następujące zdarzenia:
  
    Utwórz: jest wywoływane, gdy na warstwie zostanie utworzona instancja sequence.
    Zniszcz: polecenie jest wywoływane, gdy instancja sequence na warstwie zostanie zniszczona.
    Czyszczenie: jest wywoływane, gdy instancja sequence jest odśmiecana.
    Krok: uruchamiany tuż przed zwykłym zdarzeniem kroku object. Ważne! Jeśli odtwarzanie strony sequence zostanie wstrzymane, zdarzenie to zostanie wyzwolone dopiero w następnym kroku po ponownym uruchomieniu strony sequence.
    Rozpocznij krok: wyzwalane tuż przed zdarzeniem object begin-step. Ważne! Jeśli odtwarzanie strony sequence zostanie wstrzymane, zdarzenie to zostanie wywołane dopiero w następnym kroku po ponownym uruchomieniu strony sequence.
    Krok końcowy: wyzwalany tuż przed zdarzeniem object end-step. Ważne! Jeśli odtwarzanie strony sequence zostanie wstrzymane, zdarzenie to zostanie wyzwolone dopiero w następnym kroku po ponownym uruchomieniu strony sequence.
    System asynchroniczny: wyzwalany tak samo jak dowolny system object Asynchroniczny system obsługi zdarzeń. Ważne! Jeśli witryna sequence jest wstrzymana, to zdarzenie nie zostanie wywołane.
    Komunikat rozsyłany: uruchamiany podczas aktualizacji sequence po napotkaniu komunikatu rozsyłanego keyframe.
  
  Wszystkie zdarzenia muszą być powiązane z funkcjami zdefiniowanymi w witrynie script, dlatego aby utworzyć zdarzenie, należy przypisać zmienną metody do właściwości o odpowiedniej nazwie, która powie witrynie sequence, które zdarzenie ma wywołać funkcję. Składnia jest następująca:
  <sequence_struct>.<event_property> = method(<sequence_struct>, <function_name>);
  Właściwości strony sequence struct dla różnych zdarzeń są następujące:
  
    event_create
    event_destroy
    event_clean_up
    event_step
    event_step_begin
    event_step_end
    event_async_system
    event_broadcast_message
  
  Aby podać przykład użycia, załóżmy, że chcemy, aby strona sequence zmieniała kierunek po wykryciu kliknięcia lewym przyciskiem myszy. W tym celu należałoby najpierw utworzyć stronę script z funkcją, którą chcemy wywołać, na przykład tak:
  /// @function seq_reverse();
    
    function seq_reverse()
    {
        if mouse_check_button_pressed(mb_left)
        {
            if self.headDirection == seqdir_right
            {
                self.headDirection = seqdir_left;
            }
            else self.headDirection = seqdir_right;
        }
    }
  
  W tej funkcji jedyne, co robimy, to nasłuchujemy naciśnięcia myszy, a następnie odwracamy kierunek odtwarzania strony sequence, do której została przypisana metoda. Zauważysz, że obecnie nie można przekazywać żadnych parametrów do funkcji, które są powiązane z tymi właściwościami, a we wszystkich przypadkach zmienna self zmienna w zakresie funkcji jest przypisywana do instancji sequence.
  UWAGA: Warto zauważyć, że w powyższym script identyfikator self można pominąć i jest on używany tylko po to, aby wyraźnie pokazać zakres zmiennej metody używanej w tym przykładzie.
  Aby przypisać tę funkcję do strony sequence, należy wykonać następujące czynności:
  var _seq = sequence_get(Sequence1);
    _seq.event_step = method(_seq, seq_reverse);
  Teraz przypisaliśmy zdarzenie step do obiektu sequence z funkcją wykrywania naciśnięcia myszy i zmiany kierunku odtwarzania instancji sequence po jej utworzeniu w room.
  Momenty
   Moment sequence to unikalna akcja kodowa, która jest uruchamiana na jednej lub kilku określonych klatkach podczas odtwarzania sequence. Te momenty kodu są - podobnie jak w przypadku zdarzeń (wyjaśnionych powyżej) - po prostu predefiniowanymi zmiennymi metod, które są uruchamiane w danej klatce. Na przykład, jeśli chcesz, aby strona sequence utworzyła instancję "pocisku" na określonej klatce animacji, musisz najpierw utworzyć funkcję, która będzie używana do tej akcji, coś takiego jak poniżej:
  /// @function seq_shoot();
    
    seq_shoot = function()
    {
        instance_create_layer(sequence.xorigin, sequence.yorigin, "Instances", obj_Bullet);
    }
  
  Następnie należy dodać ją do ramki we właściwości momentKeyframes na stronie sequence struct. Jest to zasadniczo "specjalna" ścieżka, która jest używana tylko do tego celu i może przyjmować tylko dane keyframe związane z chwilowymi działaniami, które mają być wykonywane na stronie sequence. Tę ścieżkę tworzy się w taki sam sposób, jak każdą inną, tworząc keyframe structs i wypełniając je danymi keyframe, gdzie kanał 0 jest jedynym kanałem, którego można używać, a typ ścieżki to seqtracktype_moment. Poniżej znajduje się przykład utworzenia takiej ścieżki przy użyciu zdefiniowanej powyżej funkcji, która będzie uruchamiać się w podanych momentach (klatkach):
  var _seq = sequence_get(my_Seq);
    var _k = array_create(3);
    _k[0] = sequence_keyframe_new(seqtracktype_moment);
    _k[0].frame = 60;
    _k[1] = sequence_keyframe_new(seqtracktype_moment);
    _k[1].frame = 120;
    _k[2] = sequence_keyframe_new(seqtracktype_moment);
    _k[2].frame = 180;
    var _d = array_create(1);
    _d[0] = sequence_keyframedata_new(seqtracktype_moment);
    _d[0].channel = 0;
    _d[0].event = method(_d[0], seq_shoot);
    _k[0].channels = _d;
    _k[1].channels = _d;
    _k[2].channels = _d;
    _seq.momentKeyframes = _k;
  Powyższy kod po prostu ustawi klatki 60, 120 i 180 ścieżki "moment" tak, aby wywoływały metodę seq_shoot. Zauważysz, że obecnie nie możesz przekazywać żadnych parametrów do funkcji, które są używane dla każdego momentu, a we wszystkich przypadkach zmienna self w zakresie funkcji jest przypisywana do instancji sequence (generalnie nie musisz używać self, ale w niektórych szczególnych przypadkach może to być przydatne).
  Komunikaty rozsyłane
  W sekwencjach można generować komunikaty rozgłoszeniowe, czyli proste komunikaty strings, które są dodawane do określonych klatek animacji timeline, a po osiągnięciu tego punktu na stronie timeline komunikat string zostanie rozesłany do wszystkich instancji object, które go słuchają. Komunikaty te można dodawać w witrynie IDE za pomocą edytora sekwencji, ale można je także tworzyć i edytować za pomocą kodu.
  Aby utworzyć wiadomość nadawaną na stronie sequence za pomocą adresu GML, należy dodać ją do ramki we właściwości messageEventKeyframes adresu sequence struct. Jest to w zasadzie "specjalna" ścieżka, która jest używana tylko do tego celu i może przyjmować tylko dane keyframe związane z wiadomościami nadawanymi przez stronę sequence. Tę ścieżkę tworzy się w taki sam sposób, jak każdą inną, tworząc keyframe structs i wypełniając ją danymi keyframe, gdzie kanał 0 jest jedynym kanałem, którego można używać, a typ ścieżki to seqtracktype_message. Poniżej znajduje się przykład tworzenia takiej ścieżki:
  var _seq = sequence_get(my_Seq);
    var _k = array_create(2);
    _k[0] = sequence_keyframe_new(seqtracktype_message);
    _k[0].frame = 60;
    _k[1] = sequence_keyframe_new(seqtracktype_message);
    _k[1].frame = 120;
    var _m1 = array_create(2);
    _m1[0] = "Hello";
    _m1[1] = "World";
    var _m2 = array_create(1);
    _m2[0] = "This is a Broadcast Message";
    var _d1 = array_create(1);
    _d1[0] = sequence_keyframedata_new(seqtracktype_message);
    _d1[0].channel = 0;
    _d1[0].events = _m1;
    var _d2 = array_create(1);
    _d2[0] = sequence_keyframedata_new(seqtracktype_message);
    _d2[0].channel = 0;
    _d2[0].events = _m2;
    _k[0].channels = _d1;
    _k[1].channels = _d2;
    _seq.messageEventKeyframes = _k;
  Zauważysz, że tekst komunikatu jest przekazywany do kanału danych keyframe w postaci tablicy. Dzieje się tak, ponieważ w tej samej ramce można nadawać wiele komunikatów, a różne instancje object mogą ich słuchać i reagować na nie w różny sposób, w zależności od tego, jakiego komunikatu oczekują.
  Po wyemitowaniu komunikatu przez stronę sequence można go przetworzyć, korzystając ze zdarzenia Inne > Komunikat nadawany w instancjach object, które szczegółowo opisano tutaj.
   
   
   
  
    
      
        Powrót: Sekwencje
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

