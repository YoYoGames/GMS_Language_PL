
  
  Kolizje
  Podczas planowania ruchów lub podejmowania decyzji o wykonaniu pewnych czynności często ważne jest sprawdzenie, czy w określonych miejscach w świecie gry występują kolizje z innymi stronami objects, a często wybór odpowiedniej kolizji jest najważniejszym zadaniem. GameMaker Studio 2 ma wiele wbudowanych funkcji, które pomagają w prawidłowym radzeniu sobie z kolizjami, zgodnie z potrzebami projektu.
  UWAGA W poprzednich wersjach GameMaker funkcje kolizji używały wartości całkowitych, jednak obecnie używają wartości zmiennoprzecinkowych, co oznacza, że funkcje kolizji nie będą już zaokrąglać argumentów o wartościach innych niż całkowite. Aby uzyskać więcej informacji, przeczytaj Tryb zgodności z kolizją.
  Proste sprawdzanie kolizji
  Poniższe funkcje opisują różne sposoby sprawdzania przez instancję kolizji z inną instancją:
  
    place_empty
    place_free
    place_meeting
    position_empty
    position_meeting
    position_change
    position_destroy
    instance_place
    instance_place_list
    instance_position
    instance_position_list
  
   
  Zaawansowana kontrola zderzeń
  Można do tego wykorzystać poniższe procedury (a także inne funkcje opisane w rozdziałach Ruch dookoła i Instancje). Wszystkie te funkcje kolizji działają nieco inaczej, ale mają trzy wspólne argumenty, które tu wyjaśnimy:
  
    obj: W tym miejscu określamy adres object, z którym funkcja ma sprawdzić kolizję. Może to być identyfikator instancji, typ object lub specjalne słowo kluczowe GM all. Warto również zauważyć, że jeśli wybrany typ object jest rodzicem innego typu objects, to wszystkie dzieci tego typu object również zostaną uwzględnione w tym sprawdzeniu.
    prec: Może to być true lub false i dotyczy precyzji sprawdzania kolizji. Jeśli jest ustawiona na true, wówczas będą obliczane kolizje precyzyjne (ale tylko wtedy, gdy sprawdzana witryna object ma zaznaczoną opcję "precyzyjne" dla wykrywania kolizji we właściwościach maski), co jest nieco bardziej skomplikowanym zadaniem dla procesora i dlatego należy z niego korzystać ostrożnie. Jeśli false, kolizje będą obliczane na podstawie pola ograniczającego sprawdzanej strony object.
    notme: Może zajść potrzeba sprawdzenia kolizji z object, który ma ten sam indeks co object, na którym działa kod, więc aby zapobiec znalezieniu przez kod kolizji z samym sobą, możesz ustawić to na true. Jeśli szukasz konkretnie instancji object, na której działa kod, lub nie jest to ważne, możesz zostawić to jako false.
  
  Funkcje podstawowe zwracają albo identyfikator instancji, która znalazła się w kolizji, albo specjalne słowo kluczowe noone, gdy nie ma kolizji, natomiast funkcje listowe zwracają liczbę instancji, które są w kolizji, i wypełniają ich identyfikatorami gotową listę DS. Zauważ, że jeśli istnieje wiele kolizji z obszarami zdefiniowanymi przez te funkcje i instancjami podanej strony object, zwracany jest tylko jeden identyfikator instancji, przy czym może to być dowolna z instancji w kolizji.
  Istnieją następujące funkcje dotyczące zaawansowanych kolizji.
  
    collision_circle
    collision_circle_list
    collision_ellipse
    collision_ellipse_list
    collision_line
    collision_line_list
    collision_point
    collision_point_list
    collision_rectangle
    collision_rectangle_list
  
   
  Kontrola zderzeniowa bez maski
  Wszystkie powyższe funkcje są związane z instancjami sprawdzającymi kolizje i jako takie opierają się na masce kolizji zdefiniowanej dla danej instancji. Jest jednak wiele momentów, w których trzeba sprawdzić "kolizje" z punktem lub obszarem, zwłaszcza gdy instancja nie ma przypisanej strony sprite lub gdy pracujesz z myszą itd. Dlatego GameMaker Studio 2 udostępnia także następujące funkcje, które pomagają w takich sytuacjach:
  
    point_in_rectangle
    point_in_triangle
    point_in_circle
    rectangle_in_rectangle
    rectangle_in_triangle
    rectangle_in_circle
  
   
  Fizyka Zderzenia
  W przypadku korzystania z wbudowanej fizyki nie ma gwarancji, że powyższe funkcje kolizji zadziałają w instancjach z włączoną fizyką. Wynika to głównie z faktu, że te instancje nie używają już większości zwykłych wbudowanych zmiennych (zamiast tego instancje z włączoną fizyką mają własny zestaw zmiennych), a także nie używają maski kolizji ani pola ograniczającego, ponieważ zamiast tego używają uchwytów. Istnieje jednak specjalna funkcja do testowania kolizji z włączoną fizyką, która sprawdza, czy nie zachodzą na siebie elementy stałe:
  
    physics_test_overlap
  
   
   
   
  
    
      
        Powrót: Ruch i zderzenia
        Następny: Ruch
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

