
  
  Tworzenie sieci
  Funkcje sieciowe GameMaker Studio 2 są oparte na gniazdach, które są standardem przemysłowym na wszystkich platformach. Dzięki gniazdom można tworzyć zarówno klientów, jak i servers za pomocą prostej strony GML, co pozwala na stworzenie nawet gry dla jednego gracza w modelu klient/serwer (co pozwoli na łatwe dodanie trybu wieloosobowego w późniejszym czasie).
  Zasadniczo gniazdo to adres object, który może wysyłać, odbierać, łączyć się i nasłuchiwać na portach w sieci. Funkcje te dotyczą wyłącznie połączeń TCP/IP, na których opiera się Internet (dokładniej IPv4). Zasadniczo umożliwia to połączenie jednego gniazda o adresie IP (powiedzmy 192.168.1.10) z innym gniazdem o innym adresie IP (powiedzmy 192.168.1.11). Po połączeniu te dwa gniazda mogą przesyłać dane tam i z powrotem za pomocą funkcji network_send_* (np. network_send_packet()) oraz dedykowanego zdarzenia asynchronicznego, które jest przez nie wywoływane. Zdarzenie asynchroniczne wygeneruje mapę DS zawierającą otrzymane dane oraz inne szczegóły. Szczegółowe informacje na ten temat można znaleźć w rozdziale Zdarzenie asynchroniczne sieci.
  Zamiast tego, że programy muszą odczytywać i obsługiwać każdy bit ruchu sieciowego przychodzącego do maszyny, adresy IP obsługują również porty, które są ponumerowane od 0 do 65535. Dzięki temu każdy program otrzymuje tylko te pakiety danych, które go interesują, a nie wszystko, co zostało wysłane przez każdy inny program. Pozwala to również zaoszczędzić sporo czasu procesora, ponieważ znacznie skraca czas przetwarzania danych, dlatego za pomocą GameMaker Studio 2 można również "nasłuchiwać" portów. Tak więc server utworzy gniazdo, a następnie powiąże je z określonym portem, na którym będzie nasłuchiwać. Następnie będzie otrzymywać powiadomienia o połączeniach, rozłączeniach i transferach danych z tego gniazda.
  Same "pakiety" danych składają się z danych binarnych pobranych z witryny buffer. Tę witrynę buffer można utworzyć i manipulować nią za pomocą funkcji GameMaker Studio 2 Buffer.
  Warto zauważyć, że jeśli tworzysz projekt dla platformy docelowej HTML5, nie będziesz mógł użyć funkcji tworzenia server ze względu na ograniczenia przeglądarki i będziesz musiał napisać własną stronę server dla tej platformy, używając czegoś takiego jak Electron lub NodeJS. Zwróć też uwagę, że jeśli Twoja gra jest wieloplatformowa i przewidujesz połączenie z instancją HTML5 gry z server działającej na urządzeniu mobilnym lub stacjonarnym, to Twoja server może komunikować się z instancją HTML5 tylko za pomocą protokołu Web Socket (służy do tego stała network_socket_ws lub network_socket_wss - zob. network_create_server() więcej informacji). Oznacza to, że Twój server może być zmuszony do utworzenia dwóch gniazd na różnych portach - jednego do łączenia się z instancjami nieobsługującymi HTML5 (Android, Windows, itd...) i jednego do łączenia się z instancją HTML5.
  Do pracy w sieci można wykorzystać następujące funkcje:
  
    network_create_server
    network_create_server_raw
    network_create_socket
    network_create_socket_ext
    network_connect
    network_connect_async
    network_connect_raw
    network_connect_async_raw
    network_resolve
    network_set_config
    network_set_timeout
    network_send_broadcast
    network_send_packet
    network_send_raw
    network_send_udp
    network_send_udp_raw
    network_destroy
  
   
   
   
  
    
      
        Powrót: Odniesienie do GML
        Następny: Strona internetowa
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

