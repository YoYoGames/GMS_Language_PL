
  
  gml_pragma
  Funkcja gml_pragma wpływa na sposób, w jaki dany cel kompiluje Twój kod i powinna być wywoływana z różnymi poleceniami w celu dalszej optymalizacji końcowej kompilacji Twojego projektu. Polecenia te są przetwarzane przed kompilacją gry, dlatego funkcję można umieścić w dowolnym miejscu w projekcie, a i tak zostanie ona przetworzona przed pełną kompilacją gry. Dostępne są następujące polecenia:
  
    "forceinline" - Kiedy funkcja jest wywoływana z pragmatem "forceinline" w funkcji skryptu, YYC skompiluje projekt z funkcją inline, a nie referencją. Zapewni to dalsze zwiększenie wydajności przetwarzania, ale należy zachować ostrożność podczas używania tego pragmatu, ponieważ spowoduje to również zwiększenie rozmiaru końcowego pliku wykonywalnego, zwłaszcza jeśli kod inline jest duży i/lub używany w wielu różnych miejscach, a także znacznie wydłuży czas kompilacji. Zwróć uwagę, że pragma ta jest ważna tylko podczas budowania przy użyciu YYC.
    "global", "[gml code]" - Pragma "global" umożliwia wywołanie kodu GML sformatowanego jako string, w zakresie globalnym, w czasie kompilacji, przed wykonaniem pierwszej room gry. Na przykład:
     gml_pragma("global", "Init()");
      Spowoduje to wywołanie funkcji script "Init" przed uruchomieniem pierwszej room gry. Zauważ, że GML podany jako drugi argument musi być stałą czasu kompilacji, a także zauważ, że nie możesz używać tej pragmy do tworzenia instancji lub wykonywania jakichkolwiek operacji, które wymagają room (lub czegokolwiek w room) do działania.
    
    "PNGCrush" - Pragma "PNGCrush" użyje programu PNGCrush na każdej utworzonej stronie texture. Zwróć uwagę, że może to znacznie wydłużyć czas kompilacji gry, więc nie chcesz, aby był włączony przez cały czas, choć może to znacznie zmniejszyć rozmiar pliku.
    "Texgroup.Scale", "[TextureGroupName]", "[Scale Divisor]" - Funkcja "Texgroup.Scale" przeskaluje podaną grupę texture podczas kompilacji. Musisz tu podać dwa dodatkowe argumenty: "[TexGroupName]", czyli nazwę ( string) grupy texture, która ma być skalowana, oraz "[Scale Divisor]" (również string), czyli dzielnik, którego chcesz użyć do skalowania, np:
     gml_pragma("Texgroup.Scale", "level1", "2");
      Spowoduje to przepołowienie wszystkich stron textures w grupie "level1" texture.
    
    "UnityBuild", "[enable/disable]" - Jeśli wywołasz funkcję z tym pragmatem i ustawisz argument enable/disable na true, to podczas kompilacji zwinie ona wszystkie pliki .cpp w projekcie do jednego pliku, którego następnie użyje do zbudowania wszystkiego, na przykład:
     gml_pragma("UnityBuild", "true");
      Zaletą kompilacji unity jest to, że kompilacja jest szybsza, ale minusem jest to, że za każdym razem wykonywana jest pełna kompilacja, więc nawet jeśli zmienisz jedną część kodu, wszystko zostanie zbudowane od nowa, bez użycia żadnych plików z pamięci podręcznej. Ta funkcja została dodana specjalnie dla eksportu na Xbox One przy użyciu YYC, chociaż może być wywołana dla innych buildów(tylko YYC). Więcej informacji na temat buildów unity można znaleźć tutaj.
    
  
  UWAGA: Pierwszy argument funkcji gml_pragma musi być stałą czasu kompilacji string , a nie zmienną.
   
  Składnia:
  gml_pragma(command, [optional...]);
  
    
      
        Argument
        Typ
        Opis
      
      
        command
        String
        A string with one of the commands listed above.
      
      
        [optional]
        String
        Some of the available commands require an optional argument or arguments. These are explained above for each command.
      
    
  
   
  Zwroty:
  N/A
   
  Przykład:
  gml_pragma("forceinline");
  Powyższy przykładowy kod spowoduje, że funkcja script, w której jest ona używana, będzie musiała być dołączona do linii podczas kompilacji.
   
   
   
  
    
      
        Powrót: System operacyjny i kompilator
        Następny: parameter_count
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

