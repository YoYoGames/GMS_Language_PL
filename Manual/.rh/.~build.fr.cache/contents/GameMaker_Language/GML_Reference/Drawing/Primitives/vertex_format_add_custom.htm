
  
  vertex_format_add_custom
  Ta funkcja umożliwia użycie niestandardowego typu danych dla określonych atrybutów formatu vertex w ramach tworzonego nowego formatu vertex. Dostępne wartości, które można wykorzystać, są określone przez wybraną stałą typu danych, wymienioną poniżej:
  
    
      
      
    
    
      
        Stała typu danych wierzchołka
      
      
        Stała
        Opis
      
      
        vertex_type_float1
        Pojedyncza wartość zmiennoprzecinkowa
      
      
        vertex_type_float2
        Dwie wartości zmiennoprzecinkowe
      
      
        vertex_type_float3
        Trzy wartości zmiennoprzecinkowe
      
      
        vertex_type_float4
        Cztery wartości zmiennoprzecinkowe
      
      
        vertex_type_colour
        Cztery wartości składowe (r, g, b, a)
      
      
        vertex_type_ubyte4
        Czteroskładnikowe, niepodpisane wartości bajtowe (od 0 do 255)
      
    
  
  
    Należy również określić sposób wykorzystania tych stałych, aby można było odpowiednio "powiązać" wartości w tworzonej witrynie shader. Jest to konieczne ze względu na fakt, że DX i OpenGL mają różne wymagania, więc jeśli nie zwiążesz ich prawidłowo, nie będą one prawidłowo wyświetlane na stronie shader. Dostępne stałe użytkowe, które możesz wybrać, są wymienione poniżej, a te, których użyjesz, będą zależały od specyfiki tworzonej strony shader:
  
    
      
      
    
    
      
        Typ wykorzystania wierzchołków Stała
      
      
        Stała
        Opis
      
      
        vertex_usage_position
        wartości położenia (x, y, z)
      
      
        vertex_usage_colour
        wartości kolorów (r, g, b, a)
      
      
        vertex_usage_normal
        wartości normalne wierzchołków (nx, ny, nz)
      
      
        vertex_usage_textcoord
        Współrzędne UV (u, v)
      
      
        vertex_usage_blendweight
        blendweight macierzy wejściowej (np. dla animacji szkieletowej)
      
      
        vertex_usage_blendindices
        indeksy macierzy, które mają być używane (np. do animacji szkieletowej)
      
      
        vertex_usage_depth
        Głębokość wierzchołka buffer wartość
      
      
        vertex_usage_tangent
        wartości stycznych
      
      
        vertex_usage_binormal
        wartości binormalne
      
      
        vertex_usage_fog
        wartości mgły
      
      
        vertex_usage_sample
        indeks samplera
      
    
  
  
    Przy korzystaniu z takich niestandardowych formatów należy pamiętać o kilku ważnych rzeczach:
  
    Funkcja vertex_format_add_custom() obsługuje tylko vertex_usage_position, vertex_usage_colour, vertex_usage_normal i vertex_usage_textcoord przy użyciu GLSL shaders. Będą one mapowane odpowiednio na atrybuty shader in_Position , in_Colour[0 - ...], in_Normal (wszystko, co nie jest jednym z tych trzech atrybutów - np. współrzędne texture - może być mapowane na dowolny atrybut zdefiniowany przez użytkownika).
    Generalnie, jeśli to możliwe, powinieneś używać vertex_usage_textcoord dla wszystkich dodatkowych parametrów, ponieważ typy takie jak vertex_usage_blendweight i vertex_usage_tangent są prawie przestarzałe w większości języków shader i prawdopodobnie nie będą poprawnie konwertowane. Zamiast tego należy używać vec, vec2, vec3 lub vec4, vertex_usage_textcoord, a wszystko powinno działać poprawnie.
    GLSL ES nie obsługuje atrybutów całkowitych, więc przekazywanie współrzędnych ivec4 nie działa (ten typ jest zwykle używany przy przekazywaniu współrzędnych vertex_usage_blendindices). Musisz przekazać współrzędne texture, a następnie w shader przekonwertować je na ivec4 w następujący sposób:
  
   
  attribute vec3 in_Position;
    attribute vec4 in_BlendIndices;
    attribute vec4 in_BlendWeights;
    
    varying vec4 v_vColour;
    varying mat4 v_mat;
    
    void main()
    {
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);
        v_vColour = in_BlendWeights;
         ivec4 t = ivec4(in_BlendIndices);
         v_mat = gm_Matrices[ t.x ];
    }
  
  
    Wagi mieszanek są zwykle przechowywane w tablicy, a dostęp do nich uzyskuje się za pomocą indeksów mieszanek, ale tutaj widać, że zamiast definiować in_BlendIndices jako atrybut ivec4, jest to atrybut vec4, który w kodzie jest zamieniany na ivec4. Jest on następnie używany do indeksowania tablicy utworzonej przy użyciu gm_Matrix (dostęp do tablicy można uzyskać tylko przy użyciu wartości INT - nie float).
    
     
  
  Składnia:
  vertex_format_add_custom(type, usage);
  
    
      
        Argument
        Typ
        Opis
      
      
        type
        Stała typu danych wierzchołka
        The data type that this custom vertex data will hold (see the type constants listed above).
      
      
        usage
        Typ wykorzystania wierzchołków Stała
        The use that the data will get(see the usage constants listed above).
      
    
  
   
  Zwroty:
  N/A
   
  Przykład:
  vertex_format_begin();
    vertex_format_add_textcoord();
    vertex_format_add_custom(vertex_type_float3, vertex_usage_position);
    my_format = vertex_format_end();
  Powyższy kod utworzy nowy format vertex zawierający tylko texture i 3 niestandardowe wartości zmiennoprzecinkowe dla pozycji. Następnie zapisuje identyfikator formatu w zmiennej "my_format".
   
   
   
  
    
      
        Powrót: Prymitywy i Vertex Formaty
        Następny: vertex_format_end
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

