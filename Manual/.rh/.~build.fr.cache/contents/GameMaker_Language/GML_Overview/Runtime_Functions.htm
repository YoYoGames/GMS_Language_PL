
  
  Funkcje w czasie rzeczywistym
  Ogólna definicja funkcji jest następująca:
  Funkcja ma wejście i wyjście, a wyjście jest związane z wejściem.
  W programie GameMaker przekłada się to na dwie różne rzeczy, ale obie działają tak samo:
  
    Funkcje runtime - Funkcja runtime to funkcja dostarczana jako część języka GameMaker Language (GML). Są one wbudowane w język i mogą być używane do tworzenia zdarzeń w grach. Dostępnych jest wiele funkcji GML runtime, z których wszystkie są wyjaśnione w sekcji Language Reference w podręczniku.
    Funkcje i metody skryptów - Skrypt funkcje i Metody Zmienne to funkcje, które utworzyłeś samodzielnie przy użyciu podstawowych elementów języka GameMaker Language (GML). Mogą one zawierać funkcje runtime jako część swojego kodu.
  
  W obu powyższych przypadkach funkcja ma postać nazwy funkcji, po której następują argumenty wejściowe ujęte w nawiasy () i oddzielone przecinkami (jeśli funkcja nie ma argumentów wejściowych, stosuje się tylko nawiasy). Na tej stronie skupiono się na funkcjach uruchamianych w czasie rzeczywistym (tzn. tych, które są wbudowane w GameMaker i tworzą GameMaker Language), ale przedstawione poniżej ogólne zasady dotyczą wszystkich typów funkcji.
  Poniżej przedstawiono zarys struktury funkcji:
  <function>(<arg0>, <arg1> ,... <argN>);
  Niektóre funkcje mogą zwracać wartości i mogą być używane w wyrażeniach, podczas gdy inne po prostu wykonują polecenia, jak pokazano na dwóch przykładach funkcji runtime:
  // Destroy the calling instance
    // This requires no arguments and returns nothing
    instance_destroy();
    
    // Get the distance from the current instance position to the mouse position
    // This takes four arguments and returns a real value
    dist = point_distance(x, y, mouse_x, mouse_y);
  
  UWAGA: Gdziekolwiek w podręczniku jako wartość zwracana funkcji występuje "N/A", oznacza to, że funkcja nie ma zwracać żadnej wartości w ramach swojego działania. Jeśli spróbujesz sprawdzić, czy te funkcje zwracają jakąś wartość, otrzymasz wartość undefined. 
  Czasami wartość zwracana przez funkcję może być wartością, której chcemy użyć w przypisaniu, ale należy pamiętać, że nie można użyć żadnej funkcji bezpośrednio jako lewej strony przypisania. Na przykład poniższy kod ustawiający prędkość na instancji spowodowałby błąd:
  instance_nearest(x, y, obj).speed = 0;
  Wartość zwracana przez wyrażenie w tym przykładzie kodu jest liczbą całkowitą (unikalną wartością ID dla najbliższej instancji) i dlatego musi być ujęta w nawiasy, aby mogła być użyta w ten sposób i prawidłowo zaadresowana do wymaganej instancji (więcej informacji na ten temat można znaleźć w części Adresowanie zmiennych w innych instancjach ). Powyższy kod zostałby poprawnie zapisany jako:
  (instance_nearest(x, y, obj)).speed = 0;
    
    //or more correctly still
    
    var inst = instance_nearest(x, y, obj);
    inst.speed = 0;
    
    function test ()
    {
        test();
    
        if (test)
        {
            test();
        }
    }
  
  W rozdziale Language Reference podręcznika znajduje się lista wszystkich dostępnych funkcji runtime oraz przykłady ich użycia, a także inne ważne informacje o tym, co mogą zwracać, jakie zdarzenia mogą wywoływać itp. Więcej informacji na temat funkcji i metod zdefiniowanych przez użytkownika w serwisie script można znaleźć w rozdziale Funkcje skryptowe oraz w rozdziale Zmienne metody.
   
   
  
    
      
        Powrót: Przegląd GML
        Następny: Zmienne i zakres zmiennych
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

