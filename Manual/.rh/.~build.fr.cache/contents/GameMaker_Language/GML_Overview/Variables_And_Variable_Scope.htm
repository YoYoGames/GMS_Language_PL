
  
  Zmienne i zakres zmiennych
  Jak każdy język programowania GML używa zmiennych jako podstawowej jednostki dla większości operacji programistycznych. Zmienne służą do przechowywania informacji w pamięci urządzenia w celu ich późniejszego (lub natychmiastowego) wykorzystania. Nadaje się im nazwy, aby można było się do nich odwoływać w funkcjach runtime i script. Zmienna w GML może przechowywać wiele różnych typy danychjak liczba rzeczywista (np. 100, 2.456575, -56 itd...), string (np. "Hello world!"), liczba całkowita (np. 1, 556, -7), boolean (true lub false), a także inne rzeczy:
  var _num = 126.4545;
    var _str = "Hello World";
    new_num = _num * 100;
    global.my_string = _str + " I said";
  Zmiennych można również używać do przechowywania wartości zwracanych przez funkcje, np:
  var _id = instance_nearest(x, y, obj_Tree);
    root = sqrt(1000);
    global.str = string_upper("Hello World");
  Tak więc zmienna to coś, co możemy nazwać i użyć do przechowywania wartości w celu późniejszego wykorzystania w jednej lub kilku operacjach. Doskonałym przykładem zmiennej w świecie rzeczywistym jest pi 𝜋 .. . jest to zmienna, którą każdy zna i która przechowuje wartość 3,14159265(itd...). Dlaczego mamy ją w naszym języku? Cóż, o wiele łatwiej jest powiedzieć komuś "pi" niż "trzy punkty jeden cztery jeden pięć dziewięć dwa sześć pięć"! Takie nazewnictwo znacznie upraszcza życie, a ponadto oznacza, że jeśli wartość zmiennej kiedykolwiek się zmieni, nie musimy wszędzie zmieniać liczby, ponieważ nazwa zmiennej pozostaje taka sama.
  Podczas tworzenia zmiennych w GML nazwa zmiennej musi zaczynać się od litery lub symbolu podkreślenia "_" i może zawierać tylko litery, cyfry i symbol podkreślenia "_" o maksymalnej długości 64 symboli. Zatem poprawne zmienne to takie elementy, jak fish, foo_bar, num1 lub _str, natomiast niepoprawne to 6fish, foo bar lub *num.
  W wielu językach programowania przed użyciem zmiennej należy utworzyć jej "przypisanie". Zasadniczo oznacza to, że podajemy komputerowi nazwę, której chcemy użyć dla zmiennej, i przypisujemy jej wartość początkową. Następnie zmienna otrzymuje miejsce w pamięci, w którym może przechowywać wartość lub wykonywać na niej operacje. Przypisanie zmiennej ma postać:
  <variable> = <expression>;
  Wyrażenie może być prostą wartością, ale może też być bardziej skomplikowane, więc zamiast przypisywać wartość zmiennej, można też dodać wartość do bieżącej wartości zmiennej, na przykład za pomocą +=:
  a = 100;   // Assigning a simple value
    b = 200;
    c = 300;
    a += b;    // Assigning with operation
    a = b + c; // Assigning with expression
  UWAGA Strona GameMaker Language akceptuje również adresy ":=", choć nie jest to najczęściej stosowany sposób:
  <variable> := <expression>;
  Podobnie, można odejmować za pomocą -=, mnożyć za pomocą *=, dzielić za pomocą /=, lub używać operatorów bitowych za pomocą |=, &=, lub ^=. Można również dodawać lub odejmować jeden od wartości za pomocą ++, --. Więcej informacji można znaleźć w sekcji Wyrażenia i operatory.
  Należy pamiętać, że nie można wykonać poniższych czynności (ani żadnej ich odmiany):
  a = b = c = 4;
  Zamiast tego należy to zrobić w następujący sposób:
  a = 4;
    b = 4;
    c = 4;
  Przedstawione powyżej przypisania zmiennych są zmiennymi instancji , ale w rzeczywistości istnieją trzy inne główne kategorie zmiennych w programie GameMaker, a każda z nich ma swój własny zakres (który można uznać za jej obszar działania lub zasięg). Różne rodzaje zmiennych i ich zakresy zostały opisane na kolejnych stronach:
  
    Zmienne lokalne
    Zmienne instancji
    Zmienne globalne
    Stałe
  
  Strona GameMaker Language zawiera także wiele różnych zmiennych wbudowanych, które mogą mieć dowolny z wyżej wymienionych zakresów (z wyjątkiem lokalnego). Zmienne te są specjalne, ponieważ są domyślnie dołączane do objects i rooms w świecie gry. Niektóre z wbudowanych zmiennych globalnych wymieniono we wspomnianej powyżej sekcji, a w różnych częściach instrukcji dotyczących sprites, rooms, objects, itd. również opisano zmienne wbudowane dostępne w każdym przypadku. Przykładami takich wbudowanych zmiennych instancji mogą być:
  
    sprite_index
    path_scale
    speed
  
  Przykładami wbudowanych zmiennych globalnych mogą być:
  
    view_xport
    GM_version
    room
  
  Większość zmiennych wbudowanych można zmieniać i ustawiać tak jak inne zmienne, a niektóre z nich mogą być nawet tablicami, tyle że nie trzeba ich ustawiać, aby je utworzyć, tak jak w przypadku zwykłej zmiennej, ponieważ są one już zainicjowane na wartość domyślną.
  Na koniec należy wspomnieć o kilku funkcjach służących do ustawiania, pobierania lub sprawdzania zmiennych, dostępnych na następnej stronie:
  
    Funkcje zmienne
  
   
   
   
  
    
      
        Powrót: Przegląd GML
        Następny: Typy danych
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

