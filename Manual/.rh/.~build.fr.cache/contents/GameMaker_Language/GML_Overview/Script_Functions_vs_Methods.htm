
  Funkcje skryptu a metody
  Na tej stronie omówiono najważniejsze informacje dotyczące używania funkcji script i metod.
  Różnica podstawowa
  Za pomocą tej składni tworzona jest funkcja skryptu:
  function name()
    {
        code;
    }
   Zmienna metody jest tworzona przy użyciu tej składni:
  name = function()
    {
        code;
    }
  Należy używać pierwszej składni w scripts, aby tworzyć funkcje globalne, które mogą być wywoływane z dowolnego zakresu w grze.
  Drugiej składni należy używać podczas tworzenia funkcji w strukturach/konstruktorach oraz na stronie objects. Ta składnia tworzy zmienną zawierającą metodę.
  Połączenia bezpośrednie
  Zarówno funkcje, jak i metody script można wywoływać bezpośrednio za pomocą nawiasów (), podobnie jak funkcje runtime:
  // Create the function
    function reset_x()
    {
        x = xstart;
    }
    
    // Call the function
    reset_x();
  
  Można także użyć funkcji script_execute() do uruchamiania funkcji script, choć jest to obecnie funkcja starszego typu i nie zaleca się jej używania.
  Połączenia pośrednie: Metody
  Odwołanie do metody można przechowywać w innej zmiennej, aby wywołać ją później za pomocą tej innej zmiennej:
  // Create method
    reset_alpha = function()
    {
        image_alpha = 1;
    }
    
    // Pass reference and call
    temp_1 = reset_alpha;
    temp_1();
  
  Zauważ, że w kodzie nie wstawiono () po reset_alpha. Dzieje się tak dlatego, że czytamy referencję do metody, a nie ją wywołujemy.
  W tym przykładzie wywołanie metody temp_1 spowoduje wywołanie metody reset_alpha, ponieważ przechowuje ona odwołanie do tej metody.
  Przekazywanie referencji do metod w ten sposób jest całkowicie w porządku. Jednak w przypadku korzystania z funkcji script istnieje pewne zastrzeżenie.
  Połączenia pośrednie: Script Funkcje
  Odwołanie do funkcji script można również przechowywać w innej zmiennej:
  // Create function
    function reset_x()
    {
        x = xstart;
    }
    
    // Store reference
    temp_1 = reset_x;
  
  Teraz można wywołać temp_1, wykonując następujące czynności:
  temp_1();
  Ponieważ jednak zmienna ta odwołuje się do funkcji skryptu, należy ją najpierw przekształcić w metodę, a następnie wywołać.
  Może to łatwo doprowadzić do zwiększonego zużycia pamięci, zwłaszcza jeśli wywołujesz tę metodę co klatkę, ponieważ silnik musi teraz tworzyć nową metodę dla tego wywołania co klatkę. 
  Jakie jest więc rozwiązanie?
  
    Użyj script_execute() aby wywołać funkcję script przez jej referencję, co nie spowoduje utworzenia metody.
    Albo, co jest lepszym rozwiązaniem: przekształć funkcję script w metodę, przekazując jej referencję.
  
  Aby zastosować drugie rozwiązanie, Twój kod wyglądałby następująco:
  temp_1 = method(undefined, reset_x);
  Jest to utworzenie nowej metody z funkcji skryptu reset_x, przy użyciu method().
  Wywołanie teraz metody temp_1() z użyciem nawiasów nie zwiększy zużycia pamięci, ponieważ metoda jest już utworzona dla użytkownika.
  Ponownie, ma to zastosowanie tylko wtedy, gdy wywołujesz funkcję script pośrednio, przez referencję przechowywaną w zmiennej. Wywołanie jej bezpośrednio nie powoduje takich problemów.
   
   
  
    
      
        Powrót: Przegląd kodu GML
        Następny: Zmienne statyczne
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

