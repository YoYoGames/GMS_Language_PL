
  
  dla
  Jednym z najczęściej używanych sposobów wielokrotnego iterowania nad instrukcją (lub instrukcjami) jest użycie for loop, które ma następującą postać:
  for (<assignment>; <expression>; <operation>;)
    {
        <statement>;
        <statement>;
        ...
    }
  Działa to w następujący sposób - najpierw wykonywane jest przypisanie, które przypisuje wartość zmiennej, następnie obliczane jest wyrażenie i, jeśli ma ono wartość true, wykonywane są polecenia w nawiasach klamrowych{}. Następnie wykonywana jest operacja na przypisanej zmiennej i ponownie obliczane jest wyrażenie. Czynność ta loop będzie kontynuowana do momentu, gdy okaże się, że wyrażenie ma wartość false.
  Może się to wydawać skomplikowane, gdy jest napisane w ten sposób, ale należy to interpretować następująco:
  
    Pierwsze przypisanie inicjalizuje pętlę for
    Wyrażenie sprawdza, czy strona loop powinna zostać zakończona.
    Oświadczenie jest wykonywane
    Operacja jest wykonywana
    Wróć do kroku 2 i ponownie wykonaj wyrażenie, a następnie kontynuuj lub zakończ pętlę
  
  Jest to niezwykle przydatne do wykonywania powtarzających się zadań, które w inny sposób wymagałyby wielu wierszy kodu, i jest powszechnie używane jako licznik do oceny tablic, rysowania rzeczy, ustawiania wartości przyrostowych itp. Poniższy przykład kodu ilustruje typowe zastosowanie tego typu instrukcji:
  for (var i = 0; i < 10; i += 1)
    {
        draw_text(32, 32 + (i * 32), string(i) + ". "+ string(scr[i]));
    }
  Powyższy kod inicjalizuje zmienną for loop, zaczynając od 0 i licząc do (włącznie) 9, a następnie używa wartości loop zmiennej i do rysowania na ekranie wartości przechowywanych w tablicy. Zwróć uwagę, że zmienna for loop i jest używana nie tylko do loop przeglądania tablicy, ale także do rysowania liczby oraz informowania programu GameMaker, do którego miejsca w room mają być rysowane wartości. Ta elastyczność jest jednym z głównych powodów, dla których for loops są tak ważne w programowaniu.
  Kiedy należy używać for loop? Zawsze wtedy, gdy trzeba wykonać stałą liczbę iteracji jednego lub więcej poleceń, śledząc jednocześnie aktualnie wykonywaną iterację i wykorzystując jej wartość.
  UWAGA: Podczas pracy z innymi osobami można spotkać się z wieloma przykładami użycia zmiennych "i" i "j" dla zmiennej licznika loop. Nie są to obowiązkowe nazwy zmiennych i można używać dowolnych nazw, takich jak "a" lub "foo" lub innych. Używanie "i" i "j" jest po prostu standardową konwencją w programowaniu.
  Warto zauważyć, że specjalnych instrukcji break i continue można używać także wewnątrz for loop. Użycie break spowoduje natychmiastowe opuszczenie loop i przejście do dowolnego kodu znajdującego się w zdarzeniu lub funkcji po zakończeniu loop, np:
  var _inst = noone;
    for (var i = 0; i < 10; i += 1)
    {
        _inst = instance_find(obj_Enemy_Parent, i);
        if instance_exists(_inst)
        {
            if _inst.object_index == obj_Enemy_Melee
            {
                break;
            }
        }
    }
    target = _inst;
  Powyższy kod loops przeszukuje 10 najbliższych instancji podanego "rodzica" object, a jeśli znajdzie instancję, sprawdza identyfikator instancji object i jeśli jest to instancja obj_Enemy_Melee, to loop jest kończone przy użyciu break, a wartość identyfikatora jest przypisywana do zmiennej (jeśli nie zostanie znaleziona żadna instancja, to do zmiennej zostanie dodane słowo kluczowe noone ).
  Przykładem użycia continue w for loop może być:
  var _val = 0;
    for (var i = 0; i < 10; i += 1)
    {
        if (val_array[i] <= 0)
        {
            continue;
        }
        _val += val_array[i];
    }
    draw_text(32, 32, "Positive Values Total = " + string(_val));
  Ten kod sprawdza wartość przechowywaną w każdej pozycji tablicy 1D o długości 10 i jeśli którakolwiek z nich jest mniejsza lub równa 0, to continue loop , co oznacza, że bieżąca iteracja zostanie zakończona, i zostanie inkrementowana, a następna loop zostanie rozpoczęta. Jeśli wartość jest większa niż 0, to jest dodawana do zmiennej lokalnej _val, a po zakończeniu loop całkowita wartość jest rysowana na ekranie.
  Więcej przykładów słów kluczowych loop można znaleźć w sekcjach repeat, while, oraz do / until.
   
   
   
  
    
      
        Powrót: Cechy językowe
        Następny: switch
      
    
    © Copyright YoYo Games Ltd. 2021 Wszystkie prawa zastrzeżone.
  
  
  

