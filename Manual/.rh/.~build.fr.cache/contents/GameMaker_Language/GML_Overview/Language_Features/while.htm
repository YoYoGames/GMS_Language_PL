
  
  natomiast
  Na stronie GameMaker Language można wykonywać pętle na wiele sposobów, a jednym z najważniejszych jest funkcja while loop. Funkcja loop ma postać:
  while (<expression>)
    {
        <statement>;
        <statement>;
        ...
    }
  W tym przypadku mamy do czynienia z instrukcją, która jest powtarzana wielokrotnie na podstawie wyników oceny wyrażenia, tzn. z while loop, tak długo, jak wyrażenie jest oceniane na true, instrukcja (która może być również blokiem kodu składającym się z wielu instrukcji z nawiasami klamrowymi {}) jest wykonywana. Poniżej znajduje się przykład typowego sposobu użycia wyrażenia "while":
  while (place_meeting(x, y, obj_Wall))
    {
        x -= 1;
    }
  Powyższy kod sprawdza kolizję między instancją wywołującą a instancją "ściany" i wykonuje wiele iteracjiw trakcie jej występowania - przesuwając instancję w lewo o jeden piksel - aż do momentu, gdy instancja przestanie być w kolizji.
  Kiedy należy używać while loop? Należy go używać zawsze wtedy, gdy chcemy powtórzyć jedno lub więcej poleceń, ale nie wiemy, ile razy mają one zostać powtórzone, pamiętając, że jeśli początkowa ocena to false, polecenia mogą nawet nie zostać uruchomione.
  Pamiętaj, że powinieneś bardzo uważać z pętlami while ! Możesz łatwo zrobić nieskończoną loops, w którym to przypadku Twoja gra zawiesi się i nie będzie reagować na żadne dane wejściowe użytkownika i będzie musiała zostać przymusowo zamknięta. Na przykład:
  while (!place_free(x, y))
    {
        x = random(room_width);
        y = random(room_height);
    }
  Powyższy kod może działać poprawnie, ale może też spowodować nieskończoną loop, jeśli instancja nie będzie w stanie znaleźć pustej pozycji, do której mogłaby się przenieść, co spowoduje zawieszenie gry. Jeśli znajdziesz się w sytuacji, w której takie coś jest możliwe, powinieneś albo użyć innego nieblokującego rodzaju loop, albo użyć dodatkowego sprawdzania zmiennych w wyrażeniu (możesz użyć wielu wyrażeń wraz zoperatorami and (&&), or (|| ) i xor (^^ ) do sprawdzenia):
  var _check = 0;
    while ((!place_free(x, y)) && (_check < 100))
    {
        x = random(room_width);
        y = random(room_height);
        _check += 1;
    }
    if _check >= 100
    {
        // code failed, so deal with it
    }
  Alternatywnie można użyć instrukcji break, aby wyłamać się z loop, na przykład poniższy kod wygeneruje 100 liczb losowych, a następnie będzie kontynuował, mimo że ocena while zawsze będzie true:
  var i = 0;
    while (true)
    {
        x[i] = random(room_width);
        y[i] = random(room_height);
        if ((i++) >= 100)
        {
            break;
        }
    }
  Można także użyć instrukcji continue na stronie while loop. Użycie tej instrukcji spowoduje zakończenie bieżącej iteracji loop i ponowne uruchomienie pętli na przykład w nowej iteracji:
  var file = file_text_open_read("Game_Data.txt");
    var _num = 0;
    while (!file_text_eof(file))
    {
        var _s = file_text_readln(file);
    
        if (_s == "")
        {
            continue;
        }
    
        str[num++] = _s;
    }
    
    file_text_close(file);
  
  Powyższy kod otwiera plik i odczytuje z niego wiersz w każdej iteracji loop aż do osiągnięcia końca zawartości pliku. Jeśli czytany wiersz jest pusty string, to bieżąca iteracja loop zostanie zakończona przy użyciu instrukcji continue i rozpocznie się nowa iteracja, w przeciwnym razie string zostanie dodany do tablicy, a pozycja tablicy będzie inkrementowana.
  Więcej przykładów funkcji loop można znaleźć w rozdziałach repeat, do... until, oraz for.
   
   
   
  
    
      
        Powrót: Cechy językowe
        Następny: do / until
      
    
    © Copyright YoYo Games Ltd. 2021 Wszystkie prawa zastrzeżone.
  
  
  

