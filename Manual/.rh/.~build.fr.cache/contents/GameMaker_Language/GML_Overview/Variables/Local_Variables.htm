
  
  Zmienne lokalne
  Zmienna lokalna to taka, którą tworzymy tylko na potrzeby konkretnego zdarzenia lub funkcji, a następnie usuwamy po zakończeniu tego zdarzenia lub funkcji. Jeśli jest tworzona w funkcji użytkownika, zmienna lokalna jest dostępna tylko dla tej funkcji, a następnie usuwana po jej zakończeniu. Dlaczego są one potrzebne? Cóż, zmienne zajmują miejsce w pamięci i może się zdarzyć, że będziemy ich używać tylko do jednej operacji lub funkcji, w którym to przypadku musimy mieć je w pamięci tylko przez ten krótki czas, kiedy są używane. Dzięki temu baza kodu jest czysta i uporządkowana, a miejsce w pamięci optymalizowane dla tych rzeczy, które naprawdę go potrzebują. Aby zadeklarować zmienną lokalną, używamy operatora var, jak poniżej:
  var _i, _num, _str;
    _i = 0;
    _num = 24.5;
    _str = "Hello World";
    
    // or
    
    var _i = 0, _num = 24.5, _str = "Hello World";
    
    // or
    
    var _i = 0;
    var _num = 24.5;
    var _str = "Hello World";
  
  Wszystkie utworzone w ten sposób zmienne zostaną "zapomniane" (tzn. usunięte z pamięci) po zakończeniu zdarzenia (lub funkcji), w którym zostały utworzone. Należy uważać, aby nazwa, którą nadajemy wszystkim zmiennym zadeklarowanym na stronie var, nie pokrywała się z inną zmienną instancji w ramach object, a także upewnić się, że nie mamy zamiaru używać wartości przechowywanej w tej zmiennej poza zdarzeniem lub funkcją, w której ją zadeklarowaliśmy (w powyższych przykładach wszystkie zmienne zadeklarowane na stronie var zostały zdefiniowane z podkreśleniem "_" przed nazwą zmiennej, ale nie jest to wymagane i zostało zrobione tylko po to, aby w kodzie było bardziej oczywiste, że mamy do czynienia ze zmienną lokalną). Jeśli jednak znajdziesz się w sytuacji, w której zmienna lokalna powinna być taka sama jak zmienna instancji, możesz użyć słowa kluczowego self, aby określić zmienną instancji jako oddzielną, na przykład:
  var hp = 10;
    with (obj_Enemy)
    {
        self.hp -= hp;
    }
  Zmienne lokalne są często używane w programach, szczególnie w loops do zliczania iteracjilub w przypadku wielokrotnego użycia wartości w jednej operacji, która nie będzie już powtarzana. Oto kilka innych przykładów:
  var _i = 0;
    repeat (10)
    {
        inventory[_i] = 0;
        _i += 1;
    }
  Powyższy kod tworzy zmienną lokalną o nazwie "_i" i ustawia ją na 0, wszystko w tej samej linii. Zauważ, że w poprzednich wersjach GameMakera musiałeś najpierw zadeklarować zmienne lokalne, a następnie przypisać im wartości, ale w tej wersji możesz je zadeklarować i przypisać im wartość w tym samym czasie. Powyższy kod używa następnie tej zmiennej do zainicjowania tablicy. Ponieważ zmienna "_i" nie będzie używana do żadnych innych funkcji w instancji poza tą, może mieć zasięg lokalny. Oto jeszcze jeden przykład:
  var _x, _y;
    _x = x - 32 + irandom(64);
    _y = y - 32 + irandom(64);
    instance_create_layer(_x, _y, "Effects", obj_blood);
  Użyliśmy zmiennych lokalnych "_x" i "_y" do przechowywania losowych współrzędnych, których następnie użyjemy do utworzenia instancji. W tym przykładzie widać, że użycie tych zmiennych nie jest absolutnie konieczne, ale ze względu na czytelność i łatwość użycia, używamy ich. To, co robimy, jest o wiele bardziej przejrzyste i oczywiste, niż gdybyśmy użyli tego kodu:
  instance_create_layer(x - 32 + irandom(64), y - 32 + irandom(64), "Effects", obj_guts);
  Należy zwrócić uwagę na jeszcze jedną rzecz związaną z var... Ponieważ są one unikalne dla zdarzenia lub funkcji, która je uruchamia, mogą być używane w innych instancjach za pomocą kodu! Oznacza to, że możemy używać tych zmiennych do ustawiania i zmieniania rzeczy w innych instancjach za pomocą konstrukcji "with()" (więcej informacji na ten temat znajduje się w rozdziale dotyczącym zakresu zmiennych ). Sam kod wyglądałby mniej więcej tak:
  var num = instance_number(obj_Enemy);
    with (obj_Enemy)
    {
        if num>10 instance_destroy();
    }
  Powyższy kod działa, ponieważ zmienna zadeklarowana na stronie var jest lokalna dla zdarzenia (lub funkcji), w którym się znajduje, a nie dla instancji czy świata gry, a zatem może być użyta w dowolnej funkcji w dowolnym miejscu object, o ile znajduje się w tym samym bloku kodu.
   
   
   
  
    
      
        Powrót: Zmienne i zakres zmiennych
        Następny: Zmienne instancji
      
    
    © Copyright YoYo Games Ltd. 2021 Wszystkie prawa zastrzeżone.
  
  
  

