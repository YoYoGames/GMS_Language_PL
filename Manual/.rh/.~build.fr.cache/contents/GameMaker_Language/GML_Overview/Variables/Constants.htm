
  
  Stałe
  Stała to rodzaj zmiennej, która jest ustawiana raz na początku gry i nigdy się nie zmienia. W rzeczywistości wartości stałych nie można zmieniać po ich zadeklarowaniu. Dzięki temu idealnie nadają się do przechowywania wartości, które są używane w grze do identyfikacji specjalnych danych.
  W witrynie GameMaker Language istnieją dwa rodzaje stałych definiowanych przez użytkownika: makra i enumy, które zostały omówione poniżej. Należy również pamiętać, że każda wartość, która jest zawsze taka sama, jest klasyfikowana jako stała, niezależnie od typu danych, np. string lub liczba 3.
  UWAGA Strona GameMaker Language ma także szereg wbudowanych stałych wartości, które służą do identyfikacji określonych rzeczy. Są one opisane na odpowiednich stronach dla funkcji runtime, które ich wymagają, w sekcji GML Reference.
  Makra
  Makra, choć nie są zmiennymi, są do nich podobne pod względem sposobu użycia, tzn. są nazwanymi wartościami, których można używać w kodzie w celu zastąpienia wartości zakodowanych na sztywno. Zasadniczo makro jest zmienną nazwaną, która przechowuje wyrażenie. Makra można definiować za pomocą Edytora skryptów, a następnie używać ich w kodzie i akcjach tak, jakby były zwykłymi zmiennymi, z tą różnicą, że nie można ich zmieniać w grze.
  Struktura składni makra jest następująca:
  #macro <variable> <expression>
  Na przykład, zdefiniuj następujące makro "total_weapons":
  #macro total_weapons 10
  Makroskładnia...
  Aby zdefiniować makra, należy poprawnie używać przedstawionej powyżej składni. Nie można używać znaku równości (jak w zmiennych) ani umieszczać średnika na końcu (jak w zwykłej instrukcji). Spowoduje to, że definicja makra będzie niepoprawna.
    
    Na przykład, to nie jest poprawny sposób definiowania makra:
    
   #macro total_weapons = 10;
    
    Usunięcie znaku równości i dwukropka spowoduje, że będzie to poprawna definicja makra.
  
  Następnie można to wykorzystać w kodzie w następujący sposób:
  pos++;
    
    if (pos >= total_weapons)
    {
        pos = 0;
    }
  
  Zauważ, że nie będziesz mógł zmienić wartości stałej, więc taki kod spowoduje awarię gry:
  total_weapons = 11;
  Makro można zdefiniować w dowolnym miejscu w kodzie lub w skrypcie, a zostanie ono prekompilowane i dołączone do gry, tak jakby było tam od początku. Zalecamy jednak utworzenie specjalnej strony script asset i zdefiniowanie tam wszystkich makr. Będzie to łatwiejsze do zorganizowania i późniejszego debugowania!
  Jeśli wartość makra ma się zmieniać w czasie wykonywania gry, to prawdopodobnie należy uczynić z niego zmienną globalną, ponieważ można je zmieniać z poziomu kodu w czasie gry, chyba że makro zostanie ustawione jako runtime  function. Ustawienie makra jako funkcji oznacza, że funkcja ta będzie wywoływana za każdym razem, gdy użyjesz makra. Na przykład:
  #macro col make_colour_hsv(irandom(255), 255, 255)
  Makro to można wywołać w następujący sposób:
  image_blend = col;
  Użycie tego kodu spowoduje, że za każdym razem, gdy zostanie użyte makro, obraz będzie mieszał się w innym kolorze. Warto zauważyć, że makra można również rozdzielać na wiele wierszy, używając znaku \, aby pokazać miejsce przerwania linii. Przykładem może być coś takiego:
  #macro hello show_debug_message("Hello" + \
    string(player_name) + \
    ", how are you today?");
  Jest to rozwiązanie czysto kosmetyczne, ponieważ podział makra w ten sposób nie będzie miał żadnego wpływu na wynik działania makra końcowego, a jego celem jest po prostu zapewnienie obsługi tekstu wielowierszowego w makrach zawierających dłuższe linie kodu.
  Bardzo ważną cechą makr jest to, że można je zdefiniować do użycia z określonymi konfiguracjami (configami), co oznacza, że można mieć tę samą nazwę makra, ale nadawać mu różne wartości w zależności od aktualnie wybranego configu. Na przykład, jeśli masz konfigurację dla Android Ads i inną dla iOS Ads, możesz zdefiniować jedno makro, które będzie przechowywało wymaganą wartość App ID:
  #macro ad_id "";
    #macro Android:ad_id "com.yoyogames.googlegame"
    #macro iOS:ad_id "com.yoyogames.appstoregame"
  Jak widać, najpierw podajesz nazwę konfiguracji, potem dwukropek :, a następnie nazwę i wartość makra. Zwróć uwagę, że pomiędzy dwukropkiem : a nazwą konfiguracji lub nazwą makra nie może być białych spacji, w przeciwnym razie zostanie wyświetlony błąd.
  Enumy
  Enum to "wyliczarka", która umożliwia utworzenie własnego ograniczonego typu danych z listą stałych wartości o następującej strukturze:
  enum <variable>
    {
        <constant> [= <value>],
        <constant> [= <value>],
        // etc...
    }
  
  W poniższym przykładzie utworzymy enum dla kolorów tęczy i przypiszemy mu różne stałe oraz wartości domyślne:
  enum rainbowcolours
    {
        red,
        orange,
        yellow,
        green,
        blue,
        indigo,
        violet
    }
  Wpisy w enum mogą być tylko liczbami całkowitymi lub wyrażeniami z poprzednich enum, których wynikiem jest liczba całkowita. Domyślnie są numerowane od 0 w górę, więc w naszym przykładzie będą to red = 0, orange = 1, yellow = 2 itd.
  Zmiennym enum można także przypisać wartości w momencie ich tworzenia:
  enum enum_test
    {
        val = 10;
    }
    
    enum rainbowcolours
    {
        red = 5,
        orange = 5 * 2,
        yellow = 15,
        green = 20,
        blue = 25,
        indigo = 30,
        violet = 35 * enum_test.val
    }
  
  Zauważ, że w powyższym przykładzie używamy innego enum do utworzenia wyrażenia dla "fioletowego". Nie zadziała to w przypadku zmiennych lub funkcji, ponieważ wartość wyliczeniowa musi być obliczana jako stała podczas kompilacji projektu. Należy również pamiętać, że wszystkie wartości wyliczeniowe są obliczane na liczby całkowite, a podczas tworzenia własnych należy pamiętać, że tylko wartości całkowite są dozwolone dla wyliczeń. Wartość ta może być dowolną liczbą całkowitą, którą może reprezentować liczba zmiennoprzecinkowa podwójnej precyzji, w tym wartości ujemne.
  Aby później uzyskać dostęp do wartości w obrębie danego typu enum, można użyć metody point ".", jak poniżej:
  variable = <enum_name>.<enum_variable>;
  Jako przykładu użyjmy enum "rainbowcolours", które utworzyliśmy w powyższym kodzie:
  colour_value = rainbowcolours.green * rainbowcolours.red;
  Zmienna colour_value będzie teraz miała wartość 100 (20 * 5).
  Należy pamiętać, że nie można modyfikować wartości stałej enum po jej utworzeniu, podobnie jak nie można modyfikować makr po ich utworzeniu.
  UWAGA: Wartości Enum są przechowywane jako int64s, więc uruchomienie na nich adresu is_real() spowoduje zwrócenie adresu false.
   
  Wbudowane stałe
  W poniższej tabeli przedstawiono listę wbudowanych stałych, które mogą być zwracane przez niektóre funkcje i operacje w projektach:
  
    
      
        Stała
        Opis
      
      
        pointer_null
        Ta stała wskazuje, że wskaźnik nie wskazuje na nic znaczącego (tak samo jak NULL   w C++ lub null w C#).
          Ta wartość jest falsy.
      
      
        pointer_invalid
        Ta stała oznacza po prostu, że wartość nie jest prawidłowym wskaźnikiem
      
      
        undefined
        Ta stała jest zwracana, gdy funkcja musi coś zwrócić, ale nie ma odpowiedniej lub "poprawnej" wartości do zwrócenia.
          Ta wartość jest falsy.
      
      
        NaN
        Jest to stała, którą można zwrócić, gdy kompilator nie może oszacować wyniku operacji jako liczby - na przykład 0 / 0 nie może być zdefiniowane jako liczba rzeczywista, a zatem jest reprezentowane przez NaN
      
      
        infinity
        
                This constant 
              odnosi się do liczby uważanej za nieskończoną, np. wynik dzielenia dowolnej wartości zmiennoprzecinkowej przez zero, np. 1.0/0.
      
      
        true
        Ta stała reprezentuje wartość 1, którą GameMaker oceni jako wartość logiczną "true" (zauważ, że każda wartość równa lub większa od 1 zostanie oceniona jako true).
      
      
        false
        Ta stała reprezentuje wartość 0, którą GameMaker oceni jako wartość logiczną "false" (zauważ, że każda wartość mniejsza lub równa 0 zostanie oceniona jako false).
      
      
        pi
        Ta stała reprezentuje wartość liczby pi: 3,141592653589793280 itd., chociaż dokładna wartość zależy od różnych czynników, takich jak system operacyjny lub platforma, na którą jest przeznaczony.
      
    
  
  Informacje na temat porównywania równości dla kilku stałych wymienionych powyżej można znaleźć w tabeli równości.
   
   
  
    
      
        Powrót: Zmienne i zakres zmiennych
        Następny: Zmienne lokalne
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

