
  
  iOS / tvOS Rozszerzenia
  Aby stworzyć extension dla iOS lub tvOS, musisz to zrobić w dwóch częściach. Pierwsza część to dodanie samego extension wraz z wymaganymi plikami, a druga to stworzenie funkcji i makr/konstant, których wymaga extension.
  Funkcje i stałe są dodawane za pomocą plików zastępczych , aby je pogrupować, więc dodajesz plik zastępczy, a następnie definiujesz funkcje i makra, jak wyjaśniono w sekcji tutaj. Aby jednak dodać resztę plików, musisz najpierw zaznaczyć pole wyboru iOS i/lub tvOS w sekcji Funkcje dodatkowe w edytorze, aby otworzyć odpowiednie okno właściwości rozszerzenia (na poniższym obrazku pokazano okno właściwości iOS, ale okno tvOS jest dokładnie takie samo):
  
  W tym miejscu można podać następujące dane:
  
    Flagi kompilatora Flags / flagi linkera: Niektóre frameworki i SDK innych firm wymagają do działania dodatkowych znaczników linkera flags i kompilatora flags, które można określić w tym miejscu (szczegóły można znaleźć w dokumentacji dołączonej do danego SDK lub frameworka).
    Nazwa klasy: Strona extension może mieć wiele klas, a każda z nich może mieć swoje własne funkcje i stałe, dlatego należy nadać jej nazwę, która będzie odzwierciedlać jej przeznaczenie.
    Nazwa klasy App Delegate: Nazwa niestandardowej klasy delegatów aplikacji. Ustawienie tego parametru pozwala stronie extension na nadpisywanie/rozszerzanie funkcjonalności aplikacji. Aby skorzystać z tej funkcji, należy wykonać następujące czynności:
      
        Upewnij się, że pliki źródłowe delegatów mają taką samą nazwę jak klasa delegata (np. @interface MyCustomAppDelegate powinien być zdefiniowany w " MyCustomAppDelegate.h")
        Dodaj zmienną środowiskową ${YYExtAppDelegateIncludes} na początku pliku nagłówkowego delegata aplikacji. Zostanie ona zastąpiona w czasie kompilacji odpowiednimi plikami include dla klasy nadrzędnej delegata.
        Użyj zmiennej środowiskowej ${YYExtAppDelegateBaseClass} jako klasy bazowej dla swojego własnego delegata aplikacji. Zostanie ona zastąpiona w czasie kompilacji właściwą klasą bazową delegata.
          
          Aby zapewnić współpracę extension z innymi extensions, które używają niestandardowych delegatów aplikacji, należy wywoływać metody klasy bazowej z metod nadrzędnych w klasie potomnej. Przed wywołaniem metody nadklasy należy się upewnić, że jest ona zaimplementowana w hierarchii klas, aby uniknąć błędów, np:
        
      
     - (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions
        {
            // Check if any superclasses implement this method and call it
            if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)])
              return [super application:application willFinishLaunchingWithOptions:launchOptions];
            else
                return TRUE;
        }
    
    Frameworki systemowe: W tym miejscu możesz dodać do swojej strony iOS dowolne ramysystemowe extension. Dodaje się je, klikając przycisk , co spowoduje dodanie ramki zastępczej, którą można następnie edytować, klikając na niej dwukrotnie przycisk . Więcej informacji o dostępnych frameworkach systemowych można znaleźć tutaj. Aby usunąć szkielet systemowy, zaznacz go i kliknij przycisk .
    Frameworki i pakiety innych firm: Ta sekcja służy do dodawania pakietów SDK i frameworków innych firm. Podobnie jak w przypadku frameworków systemowych, kliknij przycisk , aby je dodać, a następnie kliknij dwukrotnie , aby je edytować, natomiast zaznaczenie ich, a następnie kliknięcie  spowoduje ich usunięcie (informacje o nazwie frameworka można znaleźć w dokumentacji dołączonej do wybranego zestawu SDK).
    Wprowadźframework path na komputerze Mac: Jeśli chcesz dodać framework do extension, którego pliki znajdują się na komputerze Mac używanym do budowania projektu, możesz wpisać w tym polu adres path do tego frameworka (na komputerze budującym), a następnie kliknąć przycisk , aby go dodać.
      
      Plik path musi wskazywać na plik .framework, który zostanie skompresowany jako .zip i umieszczony w folderze iOSSourceFromMac pod katalogiem extension; możesz go łatwo otworzyć w dowolnym momencie, klikając prawym przyciskiem myszy  na stronie extension i wybierając polecenie Otwórz w Eksploratorze.
    
    Dodaj źródło: Możesz użyć tego przycisku, aby dodać pliki źródłowe wymagane do działania extension. Dodane pliki będą przechowywane w folderze iOSSource w katalogu rozszerzenia.
    Wstrzykiwanie kodu: W tym miejscu możesz dodać dowolny kod, który ma być wstrzykiwany (dodawany) do aplikacji iOS, gdy gra będzie budowana do testów lub ostatecznej wersji. Upewnij się, że przed wysłaniem gry do sklepu dokładnie sprawdzisz te ustawienia (i swoje uprawnienia), ponieważ nieprawidłowe ustawienia mogą spowodować, że gra nie zostanie wysłana.
  
  Wstrzykiwanie kodu
  Funkcja Code Injection może być stosowana w systemach iOS/tvOS extensions w taki sam sposób, jak opisano na stronie Android Extensions: zob.
  Następujące znaczniki są dostępne dla platform iOS i tvOS:
  YYIosPlist
    YYIosEntitlements
    YYIosCocoaPods
    YYIosCocoaPodsDependencies
    YYIosBuildRules
    YYIosBuildSettingsInjection
    YYIosScriptPhase
    YYIosCFBundleURLSchemesArray
    YYIosLSApplicationQueriesSchemesArray
    
    YYTvosPlist
    YYTvosEntitlements
    YYTvosCocoaPods
    YYTvosCocoaPodsDependencies
    YYTvosBuildRules
    YYTvosBuildSettingsInjection
    YYTvosScriptPhase
    YYTvosCFBundleURLSchemesArray
    YYTvosLSApplicationQueriesSchemesArray
  
  Miejsce wstrzyknięcia kodu na stronie runtime zależy od typu znacznika:
  
    
      
      
    
    
      
        Typ znacznika
        Ścieżka wtrysku
      
      
        Uprawnienia
        {RUNTIME} Projekt szablonowy${YYYXCodeProjName}
         ${YYXCodeProjName}.entitlements
        
      
      
        info.plist
        {RUNTIME} Projekt szablonowy${YYYXCodeProjName}
          Pliki pomocnicze${YYXCodeProjName}-Info.plist
      
      
        infoPlist.strings
        {RUNTIME} Projekt szablonowy${YYYXCodeProjName}
          pl.lproj.listaInfoPlist.strings
      
      
        project.pbxproj
        RUNTIME} {\i1}TemplateProject}${YYYXCodeProjName}.xcodeproj}
          project.pbxproj
      
      
        xcscheme
        RUNTIME} {\i1}TemplateProject}${YYYXCodeProjName}.xcodeproj}
          xcshareddata \\xcschemes\${YYXCodeProjName}.xcscheme
      
    
  
  UWAGA: Te paths są tylko dla VM; dla YYC wstrzyknięty kod trafi do katalogu {RUNTIME}\yyc\, gdzie paths może, ale nie musi, być równoważne z tymi dla VM.
  Należy pamiętać, że w systemach iOS i tvOS istnieje opcja gry, która umożliwia dodanie pliku Podfile.lock do strony GameMaker Studio 2, co jest wymagane w przypadku dodawania w tej sekcji zależności CocoaPods.
  Informacje dodatkowe
  Jeśli do witryny extension zostały dodane szkielety systemowe lub szkielety innych firm, zostaną one teraz wymienione w oknie Właściwości rozszerzeń , a obok każdego z nich zostanie zaznaczone pole wyboru. Jeśli zaznaczysz to pole, włączysz słabe łączenie, co jest przydatne, gdy trzeba "nadpisać" dowolny symbol z dołączonej biblioteki własną wartością, ale należy pamiętać, że spowolni to łączenie.
  Informacje na temat tworzenia natywnego extensions dla iOS można znaleźć w części Przykłady źródłowe, a informacje na temat używania CocoaPods w extensions można znaleźć w następującym przewodniku:
  
    iOS i tvOS: Używanie Cocoa Pods
  
   
   
   
  
    
      
        Powrót: Redaktor Extension 
        Następny: Przykłady źródeł
      
    
    © Copyright YoYo Games Ltd. 2021 Wszystkie prawa zastrzeżone.
  
  
  

