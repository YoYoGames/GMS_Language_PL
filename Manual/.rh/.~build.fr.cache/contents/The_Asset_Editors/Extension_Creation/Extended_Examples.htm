
  
  Przykłady źródeł
  Ta strona zawiera przykłady i informacje na temat kodu źródłowego extension dla Android i iOS, aby ułatwić tworzenie własnych natywnych stron extensions dla tych platform.
  Android (przykład podstawowy)
  
    Nasz przykład extension dla Android będzie zawierał funkcje, które wykonują następujące czynności:
    
      Zwróć dwie liczby dodane do siebie
      Zwraca adres string składający się z danych wejściowych string i wartości
      Zwraca adres string składający się z dwóch łańcuchów wejściowych
      Wyzwalaj zdarzenie Async - Social i wypełnij wartości w jego mapie async_load.
    
    Ta strona extension będzie korzystać z pliku .java, którego zawartość podano poniżej (kliknij, aby otworzyć):
    GenericTest.java
    Aby dodać taki plik do extension, musisz przejść do Właściwości Androida i najpierw wpisać nazwę klasy (w tym przykładzie "GenericTest"), a następnie kliknąć przycisk "Dodaj źródło" i wybrać plik .java. Spowoduje to dodanie wybranego pliku do katalogu projektu - możesz kliknąć prawym przyciskiem myszy na stronie extension, wybrać opcję "Open in Explorer" (Otwórz w Eksploratorze) i zobaczyć znajdujące się tam pliki źródłowe.
    Można teraz dodać nowy plik zastępczy do witryny extension i utworzyć w nim funkcje o następujących właściwościach:
    
      funkcja / nazwa zewnętrzna: AddTwoNumbers
        help: AddTwoNumbers(value1, value2)
        arguments: double, double
        return type: double
      
      funkcja / nazwa zewnętrzna: HowManyObjects
        help: HowManyObjects(value1, value2, string)
        arguments: double, double, string
        return type: string
      
      funkcja / nazwa zewnętrzna: BuildAString
        help: BuildAString(string1, string2)
        arguments: string, string
        return type: string
      
      funkcja / nazwa zewnętrzna: ReturnAsync
        help: ReturnAsync(value1, value2)
        arguments: double, double
        return type: double
      
    
    Poniżej znajduje się przykład funkcji AddTwoNumbers():
    Możesz teraz wywoływać te funkcje z kodu gry i używać ich jak każdej innej funkcji wbudowanej:
    var result1 = string(AddTwoNumbers(irandom(100), 50));
      var result2 = BuildAString("Hello", "World");
      var result3 = HowManyObjects(irandom(1000), irandom(1000), "Targets");
      ReturnAsync(irandom(1000), irandom(1000));
    Funkcja ReturnAsync() wywoła zdarzenie Async - Social, więc będziesz musiał dodać to zdarzenie do swojej strony object i odczytać dane z jej mapy async_load (która jest wypełniona przez kod źródłowy rozszerzenia podany powyżej).
    var type = async_load[? "type"];
      
      if (type == "finished")
      {
          var result4 = "value1: " + string(async_load[? "argument0"]) + ", ";
          result4 += "value2: " + string(async_load[? "argument1"]);
      }
    
     
  
  iOS (przykład podstawowy)
  
    Przykład podany na stronie iOS jest taki sam jak przykład Android podany powyżej; różnią się tylko pliki źródłowe, które omówimy w tej części.
    W systemie iOS extensions wykorzystuje się pliki .h i .mm, których zawartość podano poniżej (kliknij, aby otworzyć):
    GenericTest iOS Pliki źródłowe
    Aby dodać te pliki do extension, musisz najpierw przejść do Właściwości iOS i wprowadzić nazwę klasy (w tym przykładzie "GenericTest"). Następnie możesz użyć opcji "Enter framework path" (jeśli pliki są obecne na maszynie macOS używanej do budowania) lub opcji "Add Source" (jeśli są na maszynie deweloperskiej); niezależnie od tego, której opcji użyjesz, będziesz musiał wskazać im katalog, który zawiera pliki .h i .mm.
    Możesz dodać te pliki źródłowe do tej samej witryny extension, która została utworzona w poprzednim rozdziale dla witryny Android, co oznacza, że wszystkie funkcje zdefiniowane w witrynie extension będą teraz działać także w witrynie iOS (biorąc pod uwagę, że nazwy zewnętrzne wszystkich funkcji w witrynach Android i iOS są takie same). Jeśli tworzysz nową stronę extension, możesz po prostu utworzyć funkcje w taki sam sposób, jak opisano wcześniej.
     
  
  Android (wywołania zwrotne)
  
    W plikach .java extension można używać następujących funkcji wywołania zwrotnego:
    public void onStart()public void onRestart()public void onStop()public void onDestroy()public void onPause()public void onResume()public void onActivityResult(int requestCode, int resultCode, Intent data)public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults)public void onNewIntent(android.content.Intent newIntent)public void onWindowFocusChanged(boolean hasFocus)public void onConfigurationChanged(Configuration newConfig)
    
  
  iOS (wywołania zwrotne)
  
    W plikach .mm extension można używać następujących funkcji wywołania zwrotnego:
    -(void) Init
      -(void) onLaunch:(NSDictionary*)launchOptions
      -(void) onResume
      -(void) onPause
      -(void) applicationDidEnterBackground:(UIApplication *)application
      -(void) applicationWillEnterForeground:(UIApplication *)application
      -(void) onStop
      -(void) applicationProtectedDataDidBecomeAvailable:(UIApplication *)application
      -(void) applicationProtectedDataWillBecomeUnavailable:(UIApplication *)application
      -(void) applicationDidReceiveMemoryWarning:(UIApplication *)application
      -(void) applicationSignificantTimeChange:(UIApplication *)application
      -(void) application:(UIApplication *)application willEncodeRestorableStateWithCoder:(NSCoder *)coder
      -(void) application:(UIApplication *)application didDecodeRestorableStateWithCoder:(NSCoder *)coder
      -(void) application:(UIApplication *)application didUpdateUserActivity:(NSUserActivity *)userActivity
      -(void) application:(UIApplication *)application didFailToContinueUserActivityWithType:(NSString *)userActivityType error:(NSError *)error
      -(void) application:(UIApplication *)application handleWatchKitExtensionRequest:(NSDictionary *)userInfo reply:(void (^)(NSDictionary *replyInfo))reply
      -(void) applicationShouldRequestHealthAuthorization:(UIApplication *)application
      -(void) openURL:(NSURL *)url sourceApplication:(NSString *) sourceApplication annotation:(id)annotation
      -(void) application:(UIApplication *)application userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)cloudKitShareMetadata
     
  
   
  
    
      
        Powrót: Redaktor Extension 
        Następny: Tworzenie rozszerzenia
      
    
    © Copyright YoYo Games Ltd. 2022 Wszystkie prawa zastrzeżone.
  
  
  

